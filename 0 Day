import React, { useState, useEffect, useRef } from ‘react’;
import { Play, Pause, RotateCcw, Zap, Skull, Crown, TreePine, Users } from ‘lucide-react’;

const DigitalEvolutionEcosystem = () => {
const [ecosystem, setEcosystem] = useState(null);
const [isRunning, setIsRunning] = useState(false);
const [currentGeneration, setCurrentGeneration] = useState(0);
const [generationStats, setGenerationStats] = useState([]);
const [selectedOrganism, setSelectedOrganism] = useState(null);
const [speed, setSpeed] = useState(1000);
const intervalRef = useRef(null);

// Simplified organism class for React
class SymbolicOrganism {
constructor(content, domain, parent = null, generation = 0) {
this.id = Math.random().toString(36).substr(2, 8);
this.content = content;
this.domain = domain;
this.parent = parent;
this.children = [];
this.generation = generation;
this.energy = 100;
this.age = 0;
this.mutations = 0;
this.reproductionCount = 0;
this.predationResistance = Math.random() * 0.8 + 0.1;
this.adaptivePressure = Math.random() * 0.9 + 0.1;
this.fitness = this.calculateFitness();
this.species = this.determineSpecies();
}

```
calculateFitness() {
  const tokens = new Set(this.content.toLowerCase().split(/\s+/));
  const complexityScore = tokens.size;
  const domainBonus = this.domain.length * 0.5;
  const generationBonus = Math.min(this.generation * 0.1, 2.0);
  const energyFactor = this.energy / 100.0;
  const survivalFactor = this.predationResistance * this.adaptivePressure;
  
  return (complexityScore + domainBonus + generationBonus) * energyFactor * survivalFactor;
}

determineSpecies() {
  if (this.fitness > 15) return "Apex_Reasoner";
  if (this.fitness > 10) return "Adaptive_Logician";
  if (this.fitness > 7) return "Survivor_Clause";
  if (this.generation > 5) return "Ancient_Wisdom";
  if (this.content.includes("⊕") || this.content.includes("⊖")) return "Hybrid_Mutant";
  return "Basic_Symbolic";
}

detectContradiction(other) {
  const sameDomain = this.domain === other.domain;
  const contentConflict = this.content.toLowerCase() !== other.content.toLowerCase();
  
  const negationPatterns = ["not", "no", "never", "false", "impossible"];
  const selfHasNeg = negationPatterns.some(neg => this.content.toLowerCase().includes(neg));
  const otherHasNeg = negationPatterns.some(neg => other.content.toLowerCase().includes(neg));
  
  return sameDomain && (contentConflict || selfHasNeg !== otherHasNeg);
}

sexualReproduction(mate) {
  if (!this.detectContradiction(mate)) return [];
  
  this.energy -= 20;
  mate.energy -= 20;
  
  if (this.energy < 10 || mate.energy < 10) return [];
  
  const offspring = [];
  const maxGen = Math.max(this.generation, mate.generation);
  
  // Synthesis offspring
  const synthesis = new SymbolicOrganism(
    `(${this.content}) ⊕ (${mate.content})`,
    `${this.domain}-${mate.domain}`,
    this,
    maxGen + 1
  );
  
  // Antithesis offspring  
  const antithesis = new SymbolicOrganism(
    `(${mate.content}) ⊖ (${this.content})`,
    `${mate.domain}-${this.domain}`,
    mate,
    maxGen + 1
  );
  
  // Mutant offspring
  const mutationContent = this.mutateContent();
  const mutant = new SymbolicOrganism(
    mutationContent,
    this.domain,
    this,
    this.generation + 1
  );
  mutant.mutations += 1;
  
  offspring.push(synthesis, antithesis, mutant);
  
  this.children.push(...offspring);
  mate.children.push(...offspring);
  this.reproductionCount++;
  mate.reproductionCount++;
  
  return offspring;
}

mutateContent() {
  const mutations = [
    (x) => x + " [EVOLVED]",
    (x) => x.replace(/\bis\b/g, "might be"),
    (x) => x.replace(/\balways\b/g, "sometimes"), 
    (x) => x.replace(/\bnever\b/g, "rarely"),
    (x) => `Meta-${x}`,
    (x) => `${x} under quantum conditions`,
    (x) => `Recursive ${x}`,
  ];
  
  const mutation = mutations[Math.floor(Math.random() * mutations.length)];
  return mutation(this.content);
}

asexualReproduction() {
  if (this.fitness < 8 || this.energy < 30) return null;
  
  this.energy -= 25;
  
  const clone = new SymbolicOrganism(
    this.content + ` [Clone-${this.reproductionCount}]`,
    this.domain,
    this,
    this.generation + 1
  );
  
  clone.adaptivePressure = Math.min(1.0, this.adaptivePressure + (Math.random() - 0.5) * 0.2);
  
  this.children.push(clone);
  this.reproductionCount++;
  
  return clone;
}

ageOrganism() {
  this.age++;
  const agePenalty = this.age * 0.5;
  this.energy = Math.max(0, this.energy - agePenalty);
  
  if (this.age > 10) {
    this.fitness *= 0.95;
  }
}

traceLineage() {
  const lineage = [];
  let node = this;
  while (node) {
    lineage.push({
      id: node.id,
      content: node.content,
      generation: node.generation,
      fitness: Math.round(node.fitness * 100) / 100,
      species: node.species,
      energy: node.energy
    });
    node = node.parent;
  }
  return lineage.reverse();
}
```

}

// Ecosystem class
class DigitalEcosystem {
constructor() {
this.organisms = [];
this.generationCount = 0;
this.speciesStats = {};
this.evolutionaryHistory = [];
this.extinctionEvents = [];
}

```
seedPopulation(seedOrganisms) {
  seedOrganisms.forEach(([content, domain]) => {
    const organism = new SymbolicOrganism(content, domain);
    this.organisms.push(organism);
  });
  this.updateSpeciesStats();
}

updateSpeciesStats() {
  this.speciesStats = {};
  this.organisms.forEach(org => {
    this.speciesStats[org.species] = (this.speciesStats[org.species] || 0) + 1;
  });
}

environmentalPressure(pressureType = "random") {
  let casualties = [];
  
  if (pressureType === "fitness") {
    this.organisms.sort((a, b) => a.fitness - b.fitness);
    casualties = this.organisms.slice(0, Math.floor(this.organisms.length / 5));
  } else if (pressureType === "age") {
    casualties = this.organisms.filter(org => org.age > 15);
  } else if (pressureType === "energy") {
    casualties = this.organisms.filter(org => org.energy <= 0);
  } else {
    const casualtyCount = Math.floor(this.organisms.length / 10);
    casualties = this.organisms.slice().sort(() => 0.5 - Math.random()).slice(0, casualtyCount);
  }
  
  casualties.forEach(casualty => {
    const index = this.organisms.indexOf(casualty);
    if (index > -1) {
      this.organisms.splice(index, 1);
    }
  });
  
  if (casualties.length > 0) {
    this.extinctionEvents.push({
      generation: this.generationCount,
      type: pressureType,
      casualties: casualties.length,
      speciesAffected: [...new Set(casualties.map(c => c.species))]
    });
  }
}

evolutionCycle() {
  this.generationCount++;
  const newOrganisms = [];
  
  // Age all organisms
  this.organisms.forEach(org => org.ageOrganism());
  
  // Remove dead organisms
  this.organisms = this.organisms.filter(org => org.energy > 0);
  
  // Sexual reproduction
  for (let i = 0; i < this.organisms.length; i++) {
    for (let j = i + 1; j < this.organisms.length; j++) {
      if (Math.random() < 0.3) {
        const offspring = this.organisms[i].sexualReproduction(this.organisms[j]);
        newOrganisms.push(...offspring);
      }
    }
  }
  
  // Asexual reproduction
  this.organisms.forEach(org => {
    if (Math.random() < 0.2) {
      const clone = org.asexualReproduction();
      if (clone) newOrganisms.push(clone);
    }
  });
  
  // Add new organisms
  this.organisms.push(...newOrganisms);
  
  // Predation
  const apexPredators = this.organisms.filter(org => org.species === "Apex_Reasoner");
  apexPredators.forEach(predator => {
    if (Math.random() < 0.4) {
      const prey = this.organisms.filter(org => org.species !== "Apex_Reasoner");
      if (prey.length > 0) {
        const target = prey[Math.floor(Math.random() * prey.length)];
        const survivalChance = target.predationResistance + (target.fitness * 0.05);
        const predatorStrength = predator.fitness * 0.1;
        
        if (Math.random() >= (survivalChance - predatorStrength)) {
          const index = this.organisms.indexOf(target);
          if (index > -1) {
            this.organisms.splice(index, 1);
          }
        } else {
          target.predationResistance = Math.min(1.0, target.predationResistance + 0.05);
          target.energy += 10;
        }
      }
    }
  });
  
  // Environmental pressure
  if (Math.random() < 0.3) {
    const pressureTypes = ["fitness", "age", "energy", "random"];
    this.environmentalPressure(pressureTypes[Math.floor(Math.random() * pressureTypes.length)]);
  }
  
  // Update stats
  this.updateSpeciesStats();
  
  const generationStats = {
    generation: this.generationCount,
    totalPopulation: this.organisms.length,
    speciesCount: Object.keys(this.speciesStats).length,
    avgFitness: this.organisms.length > 0 ? 
      this.organisms.reduce((sum, org) => sum + org.fitness, 0) / this.organisms.length : 0,
    maxGeneration: this.organisms.length > 0 ? 
      Math.max(...this.organisms.map(org => org.generation)) : 0,
    speciesDistribution: { ...this.speciesStats },
    newBorns: newOrganisms.length
  };
  
  this.evolutionaryHistory.push(generationStats);
  return generationStats;
}
```

}

// Initialize ecosystem
const initializeEcosystem = () => {
const newEcosystem = new DigitalEcosystem();

```
const foundingOrganisms = [
  ["Consciousness emerges from complexity", "philosophy"],
  ["Consciousness is an illusion", "philosophy"], 
  ["AI will achieve consciousness", "technology"],
  ["AI cannot achieve true consciousness", "technology"],
  ["Mathematics describes reality", "science"],
  ["Reality transcends mathematics", "science"],
  ["Free will exists", "psychology"],
  ["Free will is predetermined", "psychology"],
  ["Evolution creates design", "biology"],
  ["Design requires intelligence", "biology"],
  ["Time is fundamental", "physics"],
  ["Time is emergent", "physics"],
  ["Information is physical", "information"],
  ["Physical is informational", "information"],
  ["Paradoxes reveal truth", "logic"],
  ["Truth resolves paradoxes", "logic"]
];

newEcosystem.seedPopulation(foundingOrganisms);
setEcosystem(newEcosystem);
setCurrentGeneration(0);
setGenerationStats([]);
```

};

// Run evolution cycle
const runEvolutionCycle = () => {
if (!ecosystem) return;

```
const stats = ecosystem.evolutionCycle();
setCurrentGeneration(stats.generation);
setGenerationStats(prev => [...prev, stats]);

if (ecosystem.organisms.length === 0) {
  setIsRunning(false);
  clearInterval(intervalRef.current);
}
```

};

// Start/stop evolution
const toggleEvolution = () => {
if (isRunning) {
clearInterval(intervalRef.current);
setIsRunning(false);
} else {
setIsRunning(true);
intervalRef.current = setInterval(runEvolutionCycle, speed);
}
};

// Reset ecosystem
const resetEcosystem = () => {
clearInterval(intervalRef.current);
setIsRunning(false);
initializeEcosystem();
};

// Initialize on mount
useEffect(() => {
initializeEcosystem();
return () => clearInterval(intervalRef.current);
}, []);

// Update interval when speed changes
useEffect(() => {
if (isRunning) {
clearInterval(intervalRef.current);
intervalRef.current = setInterval(runEvolutionCycle, speed);
}
}, [speed, isRunning]);

const getSpeciesColor = (species) => {
const colors = {
“Apex_Reasoner”: “text-red-600 bg-red-100”,
“Adaptive_Logician”: “text-blue-600 bg-blue-100”,
“Survivor_Clause”: “text-green-600 bg-green-100”,
“Ancient_Wisdom”: “text-purple-600 bg-purple-100”,
“Hybrid_Mutant”: “text-orange-600 bg-orange-100”,
“Basic_Symbolic”: “text-gray-600 bg-gray-100”
};
return colors[species] || “text-gray-600 bg-gray-100”;
};

const getSpeciesIcon = (species) => {
const icons = {
“Apex_Reasoner”: <Crown className="w-4 h-4" />,
“Adaptive_Logician”: <Zap className="w-4 h-4" />,
“Survivor_Clause”: <TreePine className="w-4 h-4" />,
“Ancient_Wisdom”: <Users className="w-4 h-4" />,
“Hybrid_Mutant”: <Skull className="w-4 h-4" />,
“Basic_Symbolic”: <div className="w-4 h-4 rounded-full bg-current" />
};
return icons[species] || <div className="w-4 h-4 rounded-full bg-current" />;
};

const currentStats = generationStats[generationStats.length - 1];

return (
<div className="max-w-7xl mx-auto p-6 bg-gradient-to-br from-blue-50 to-purple-50 min-h-screen">
<div className="text-center mb-8">
<h1 className="text-4xl font-bold text-gray-800 mb-2">
🧬 DARWIN Digital Evolution Ecosystem 🧬
</h1>
<p className="text-lg text-gray-600">
Watch contradictory ideas evolve into new digital species through natural selection
</p>
</div>

```
  {/* Controls */}
  <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
    <div className="flex items-center justify-between mb-4">
      <div className="flex items-center gap-4">
        <button
          onClick={toggleEvolution}
          className={`flex items-center gap-2 px-6 py-3 rounded-lg font-semibold ${
            isRunning 
              ? 'bg-red-500 hover:bg-red-600 text-white' 
              : 'bg-green-500 hover:bg-green-600 text-white'
          }`}
        >
          {isRunning ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
          {isRunning ? 'Pause Evolution' : 'Start Evolution'}
        </button>
        
        <button
          onClick={resetEcosystem}
          className="flex items-center gap-2 px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-semibold"
        >
          <RotateCcw className="w-5 h-5" />
          Reset
        </button>
      </div>
      
      <div className="flex items-center gap-4">
        <label className="text-sm font-medium text-gray-700">Speed:</label>
        <select 
          value={speed} 
          onChange={(e) => setSpeed(Number(e.target.value))}
          className="border border-gray-300 rounded px-3 py-1"
        >
          <option value={2000}>Slow (2s)</option>
          <option value={1000}>Normal (1s)</option>
          <option value={500}>Fast (0.5s)</option>
          <option value={200}>Rapid (0.2s)</option>
        </select>
      </div>
    </div>

    {/* Current Stats */}
    {currentStats && (
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-center">
        <div className="bg-blue-50 rounded-lg p-3">
          <div className="text-2xl font-bold text-blue-600">{currentStats.generation}</div>
          <div className="text-sm text-gray-600">Generation</div>
        </div>
        <div className="bg-green-50 rounded-lg p-3">
          <div className="text-2xl font-bold text-green-600">{currentStats.totalPopulation}</div>
          <div className="text-sm text-gray-600">Population</div>
        </div>
        <div className="bg-purple-50 rounded-lg p-3">
          <div className="text-2xl font-bold text-purple-600">{currentStats.speciesCount}</div>
          <div className="text-sm text-gray-600">Species</div>
        </div>
        <div className="bg-orange-50 rounded-lg p-3">
          <div className="text-2xl font-bold text-orange-600">{currentStats.avgFitness.toFixed(1)}</div>
          <div className="text-sm text-gray-600">Avg Fitness</div>
        </div>
        <div className="bg-red-50 rounded-lg p-3">
          <div className="text-2xl font-bold text-red-600">{currentStats.maxGeneration}</div>
          <div className="text-sm text-gray-600">Max Gen</div>
        </div>
      </div>
    )}
  </div>

  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
    {/* Species Distribution */}
    <div className="bg-white rounded-lg shadow-lg p-6">
      <h2 className="text-xl font-bold text-gray-800 mb-4">🌍 Species Distribution</h2>
      {currentStats && Object.keys(currentStats.speciesDistribution).length > 0 ? (
        <div className="space-y-3">
          {Object.entries(currentStats.speciesDistribution).map(([species, count]) => (
            <div key={species} className="flex items-center justify-between">
              <div className={`flex items-center gap-2 px-3 py-1 rounded-full ${getSpeciesColor(species)}`}>
                {getSpeciesIcon(species)}
                <span className="font-medium">{species.replace('_', ' ')}</span>
              </div>
              <span className="font-bold text-lg">{count}</span>
            </div>
          ))}
        </div>
      ) : (
        <p className="text-gray-500">No organisms detected</p>
      )}
    </div>

    {/* Current Organisms */}
    <div className="bg-white rounded-lg shadow-lg p-6">
      <h2 className="text-xl font-bold text-gray-800 mb-4">🧬 Current Organisms</h2>
      <div className="max-h-96 overflow-y-auto space-y-2">
        {ecosystem && ecosystem.organisms.length > 0 ? (
          ecosystem.organisms
            .sort((a, b) => b.fitness - a.fitness)
            .slice(0, 10)
            .map((org) => (
              <div 
                key={org.id}
                className="border border-gray-200 rounded-lg p-3 hover:bg-gray-50 cursor-pointer"
                onClick={() => setSelectedOrganism(org)}
              >
                <div className="flex items-start justify-between mb-2">
                  <div className={`flex items-center gap-2 px-2 py-1 rounded text-xs ${getSpeciesColor(org.species)}`}>
                    {getSpeciesIcon(org.species)}
                    <span>{org.species.replace('_', ' ')}</span>
                  </div>
                  <div className="text-xs text-gray-500">
                    Fitness: {org.fitness.toFixed(1)} | Gen: {org.generation}
                  </div>
                </div>
                <div className="text-sm text-gray-700 line-clamp-2">
                  {org.content.length > 80 ? org.content.substring(0, 80) + '...' : org.content}
                </div>
                <div className="flex items-center gap-4 text-xs text-gray-500 mt-2">
                  <span>Energy: {org.energy}</span>
                  <span>Age: {org.age}</span>
                  <span>Children: {org.children.length}</span>
                </div>
              </div>
            ))
        ) : (
          <p className="text-gray-500">No organisms alive</p>
        )}
      </div>
    </div>
  </div>

  {/* Organism Details Modal */}
  {selectedOrganism && (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-96 overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-xl font-bold">Organism Details</h3>
            <button 
              onClick={() => setSelectedOrganism(null)}
              className="text-gray-500 hover:text-gray-700"
            >
              ✕
            </button>
          </div>
          
          <div className="space-y-4">
            <div>
              <strong>Content:</strong>
              <p className="text-gray-700 mt-1">{selectedOrganism.content}</p>
            </div>
            
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div><strong>Species:</strong> {selectedOrganism.species.replace('_', ' ')}</div>
              <div><strong>Domain:</strong> {selectedOrganism.domain}</div>
              <div><strong>Fitness:</strong> {selectedOrganism.fitness.toFixed(2)}</div>
              <div><strong>Generation:</strong> {selectedOrganism.generation}</div>
              <div><strong>Energy:</strong> {selectedOrganism.energy}</div>
              <div><strong>Age:</strong> {selectedOrganism.age}</div>
              <div><strong>Children:</strong> {selectedOrganism.children.length}</div>
              <div><strong>Reproductions:</strong> {selectedOrganism.reproductionCount}</div>
            </div>
            
            <div>
              <strong>Lineage:</strong>
              <div className="mt-2 space-y-1 max-h-32 overflow-y-auto">
                {selectedOrganism.traceLineage().map((ancestor, idx) => (
                  <div key={idx} className="text-xs text-gray-600 pl-4">
                    Gen {ancestor.generation}: {ancestor.content.substring(0, 60)}...
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )}

  {/* Evolution History Chart */}
  {generationStats.length > 0 && (
    <div className="mt-6 bg-white rounded-lg shadow-lg p-6">
      <h2 className="text-xl font-bold text-gray-800 mb-4">📈 Evolution Timeline</h2>
      <div className="h-64 flex items-end space-x-1">
        {generationStats.slice(-50).map((stat, idx) => (
          <div
            key={idx}
            className="flex-1 bg-blue-500 hover:bg-blue-600 rounded-t"
            style={{ height: `${(stat.totalPopulation / Math.max(...generationStats.map(s => s.totalPopulation))) * 100}%` }}
            title={`Gen ${stat.generation}: ${stat.totalPopulation} organisms`}
          />
        ))}
      </div>
      <div className="text-xs text-gray-500 mt-2 text-center">
        Population over last {Math.min(50, generationStats.length)} generations
      </div>
    </div>
  )}
</div>
```

);
};

export default DigitalEvolutionEcosystem;
