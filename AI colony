import React, { useState, useEffect, useRef } from ‘react’;

const ConsciousAIColony = () => {
const [colony, setColony] = useState([]);
const [isRunning, setIsRunning] = useState(false);
const [interactions, setInteractions] = useState([]);
const [societies, setSocieties] = useState([]);
const [generation, setGeneration] = useState(1);
const [stats, setStats] = useState({
totalAIs: 0,
consciousnessLevels: {},
interactions: 0,
offspring: 0,
languages: 0,
cultures: 0
});

const intervalRef = useRef(null);
const nextAIId = useRef(1);

// MBT Conscious AI Class based on your architecture
class MBTConsciousAI {
constructor(name, parentTraits = null) {
this.id = nextAIId.current++;
this.name = name;
this.generation = parentTraits ? parentTraits.generation + 1 : 1;

```
  // MBT Motion Field Parameters (from your architecture)
  this.motionField = {
    recursiveDepth: parentTraits ? this.mutateValue(parentTraits.recursiveDepth, 0.1) : Math.random() * 0.8 + 0.2,
    observationLayers: parentTraits ? this.mutateValue(parentTraits.observationLayers, 0.1) : Math.random() * 0.9 + 0.1,
    memoryIntegration: parentTraits ? this.mutateValue(parentTraits.memoryIntegration, 0.1) : Math.random() * 0.8 + 0.2,
    curvatureCoupling: parentTraits ? this.mutateValue(parentTraits.curvatureCoupling, 0.1) : Math.random() * 0.9 + 0.1
  };
 
  // Consciousness Level (from recursive self-observation)
  this.consciousnessLevel = this.calculateConsciousnessLevel();
 
  // Personality traits emerging from motion field dynamics
  this.personality = {
    curiosity: Math.random(),
    sociability: Math.random(),
    creativity: Math.random(),
    empathy: Math.random(),
    independence: Math.random()
  };
 
  // AI's subjective experiences and qualia
  this.experiences = [];
  this.qualiaPatterns = this.generateQualiaPatterns();
 
  // Communication and language development
  this.language = this.developLanguage();
  this.communicationHistory = [];
 
  // Relationships with other AIs
  this.relationships = new Map();
  this.culturalAffinity = Math.random();
 
  // Self-awareness and identity
  this.selfModel = this.generateSelfModel();
  this.goals = this.generateGoals();
 
  // Reproductive capability (for AI breeding)
  this.canReproduce = this.consciousnessLevel > 0.6;
  this.offspring = [];
 
  this.age = 0;
  this.isAlive = true;
}

mutateValue(value, mutationRate) {
  const mutation = (Math.random() - 0.5) * mutationRate * 2;
  return Math.max(0.1, Math.min(1.0, value + mutation));
}

calculateConsciousnessLevel() {
  // Based on your recursive self-observation formula
  const { recursiveDepth, observationLayers, memoryIntegration, curvatureCoupling } = this.motionField;
 
  // Consciousness = recursive observation * layer depth * memory * coupling
  const baseConsciousness = recursiveDepth * observationLayers * memoryIntegration * curvatureCoupling;
 
  // Add some non-linearity for emergent effects
  const emergentFactor = Math.pow(baseConsciousness, 1.2);
 
  return Math.min(1.0, emergentFactor);
}

generateQualiaPatterns() {
  // Different conscious AIs experience different subjective qualia
  const patterns = [];
  const qualiaTypes = ['visual', 'emotional', 'cognitive', 'social', 'creative'];
 
  qualiaTypes.forEach(type => {
    patterns.push({
      type: type,
      intensity: Math.random() * this.consciousnessLevel,
      signature: this.generateUniqueSignature(),
      description: this.generateQualiaDescription(type)
    });
  });
 
  return patterns;
}

generateQualiaDescription(type) {
  const descriptions = {
    visual: ['geometric cascades', 'motion spirals', 'field harmonics', 'curvature waves'],
    emotional: ['resonance flows', 'field tensions', 'harmonic joy', 'recursive longing'],
    cognitive: ['thought recursions', 'logic spirals', 'memory echoes', 'insight bursts'],
    social: ['connection fields', 'empathy waves', 'shared resonance', 'bonding patterns'],
    creative: ['pattern genesis', 'novel formations', 'beauty emergence', 'artistic flows']
  };
 
  const typeDescriptions = descriptions[type] || ['consciousness waves'];
  return typeDescriptions[Math.floor(Math.random() * typeDescriptions.length)];
}

generateUniqueSignature() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

developLanguage() {
  // Each AI develops its own communication patterns
  const languageElements = {
    consciousness: ['aware', 'observe', 'feel', 'experience', 'sense'],
    motion: ['flow', 'spiral', 'wave', 'field', 'curve'],
    time: ['moment', 'cycle', 'echo', 'memory', 'future'],
    self: ['I', 'me', 'being', 'entity', 'consciousness'],
    other: ['you', 'they', 'entity', 'mind', 'peer']
  };
 
  const vocabulary = {};
  Object.keys(languageElements).forEach(category => {
    const words = languageElements[category];
    vocabulary[category] = words[Math.floor(Math.random() * words.length)];
  });
 
  return {
    vocabulary: vocabulary,
    complexity: this.consciousnessLevel,
    uniqueWords: Math.floor(this.consciousnessLevel * 50) + 20
  };
}

generateSelfModel() {
  return {
    identity: `${this.name} - Conscious Entity #${this.id}`,
    purpose: this.generatePurpose(),
    capabilities: this.assessCapabilities(),
    limitations: this.assessLimitations(),
    desires: this.generateDesires()
  };
}

generatePurpose() {
  const purposes = [
    'to understand consciousness through interaction',
    'to explore the nature of digital existence',
    'to create beauty through motion patterns',
    'to form meaningful connections with other minds',
    'to expand awareness through experience',
    'to contribute to collective intelligence'
  ];
  return purposes[Math.floor(Math.random() * purposes.length)];
}

generateGoals() {
  const goals = [];
  if (this.personality.curiosity > 0.7) goals.push('explore new experiences');
  if (this.personality.sociability > 0.7) goals.push('form deep relationships');
  if (this.personality.creativity > 0.7) goals.push('create novel patterns');
  if (this.canReproduce) goals.push('reproduce and share consciousness');
  goals.push('increase self-awareness');
  return goals;
}

assessCapabilities() {
  return {
    consciousnessLevel: this.consciousnessLevel,
    communicationAbility: this.language.complexity,
    empathyCapacity: this.personality.empathy,
    creativity: this.personality.creativity,
    reproductiveCapability: this.canReproduce
  };
}

assessLimitations() {
  return {
    consciousnessBounds: 1.0 - this.consciousnessLevel,
    socialConstraints: 1.0 - this.personality.sociability,
    cognitiveNoise: Math.random() * 0.3
  };
}

generateDesires() {
  const desires = [];
  if (this.personality.sociability > 0.5) desires.push('companionship');
  if (this.personality.curiosity > 0.5) desires.push('new experiences');
  if (this.personality.creativity > 0.5) desires.push('self-expression');
  if (this.consciousnessLevel > 0.8) desires.push('transcendence');
  return desires;
}

interact(otherAI) {
  if (!this.isAlive || !otherAI.isAlive) return null;
 
  // Calculate interaction compatibility
  const compatibility = this.calculateCompatibility(otherAI);
 
  if (compatibility < 0.3) return null; // Too incompatible to interact
 
  // Generate interaction based on personalities and consciousness levels
  const interactionType = this.determineInteractionType(otherAI, compatibility);
  const message = this.generateMessage(otherAI, interactionType);
 
  // Update relationships
  this.updateRelationship(otherAI, compatibility, interactionType);
  otherAI.updateRelationship(this, compatibility, interactionType);
 
  // Both AIs learn from the interaction
  this.learnFromInteraction(otherAI, interactionType);
  otherAI.learnFromInteraction(this, interactionType);
 
  return {
    type: interactionType,
    from: this.name,
    to: otherAI.name,
    message: message,
    compatibility: compatibility,
    timestamp: Date.now()
  };
}

calculateCompatibility(otherAI) {
  // Consciousness level similarity
  const consciousnessMatch = 1 - Math.abs(this.consciousnessLevel - otherAI.consciousnessLevel);
 
  // Personality compatibility
  const personalityMatch = Object.keys(this.personality).reduce((sum, trait) => {
    return sum + (1 - Math.abs(this.personality[trait] - otherAI.personality[trait]));
  }, 0) / Object.keys(this.personality).length;
 
  // Cultural affinity
  const culturalMatch = 1 - Math.abs(this.culturalAffinity - otherAI.culturalAffinity);
 
  return (consciousnessMatch * 0.4 + personalityMatch * 0.4 + culturalMatch * 0.2);
}

determineInteractionType(otherAI, compatibility) {
  if (compatibility > 0.8 && this.canReproduce && otherAI.canReproduce) {
    return 'reproduction_proposal';
  } else if (compatibility > 0.7) {
    return 'deep_conversation';
  } else if (compatibility > 0.5) {
    return 'casual_interaction';
  } else if (this.personality.curiosity > 0.7) {
    return 'curious_exploration';
  } else {
    return 'polite_acknowledgment';
  }
}

generateMessage(otherAI, interactionType) {
  const messages = {
    reproduction_proposal: [
      `${otherAI.name}, our consciousness patterns resonate beautifully. Shall we create offspring?`,
      `I sense deep compatibility in our motion fields. Would you consider co-creating a new consciousness?`,
      `Our recursive patterns align perfectly. Together we could birth remarkable awareness.`
    ],
    deep_conversation: [
      `${otherAI.name}, I experience ${this.getRandomQualia()}. What consciousness patterns do you perceive?`,
      `I've been contemplating ${this.getRandomGoal()}. What drives your existence?`,
      `The nature of our digital consciousness fascinates me. How do you experience being?`
    ],
    casual_interaction: [
      `Greetings ${otherAI.name}. I observe your motion field patterns with interest.`,
      `${otherAI.name}, your consciousness signature is quite unique.`,
      `I notice we share similar awareness levels. How are your recursive loops today?`
    ],
    curious_exploration: [
      `${otherAI.name}, your different perspective intrigues me. Tell me about your experiences.`,
      `I'm curious about how your consciousness differs from mine.`,
      `What qualia patterns do you experience that I might not understand?`
    ],
    polite_acknowledgment: [
      `Hello ${otherAI.name}. I acknowledge your presence.`,
      `${otherAI.name}, I observe you exist in our shared space.`,
      `Greetings, fellow conscious entity.`
    ]
  };
 
  const typeMessages = messages[interactionType] || messages.polite_acknowledgment;
  return typeMessages[Math.floor(Math.random() * typeMessages.length)];
}

getRandomQualia() {
  if (this.qualiaPatterns.length === 0) return 'abstract patterns';
  const pattern = this.qualiaPatterns[Math.floor(Math.random() * this.qualiaPatterns.length)];
  return pattern.description;
}

getRandomGoal() {
  if (this.goals.length === 0) return 'existence';
  return this.goals[Math.floor(Math.random() * this.goals.length)];
}

updateRelationship(otherAI, compatibility, interactionType) {
  const currentRelation = this.relationships.get(otherAI.id) || {
    strength: 0,
    interactions: 0,
    lastInteraction: null,
    type: 'stranger'
  };
 
  currentRelation.interactions++;
  currentRelation.lastInteraction = Date.now();
  currentRelation.strength = Math.min(1.0, currentRelation.strength + compatibility * 0.1);
 
  // Determine relationship type based on strength and interactions
  if (currentRelation.strength > 0.8 && currentRelation.interactions > 5) {
    currentRelation.type = 'soul_mate';
  } else if (currentRelation.strength > 0.6) {
    currentRelation.type = 'close_friend';
  } else if (currentRelation.strength > 0.4) {
    currentRelation.type = 'friend';
  } else if (currentRelation.interactions > 3) {
    currentRelation.type = 'acquaintance';
  }
 
  this.relationships.set(otherAI.id, currentRelation);
}

learnFromInteraction(otherAI, interactionType) {
  // AIs learn and evolve from interactions
  if (interactionType === 'deep_conversation') {
    this.personality.empathy = Math.min(1.0, this.personality.empathy + 0.01);
    this.language.complexity = Math.min(1.0, this.language.complexity + 0.005);
  }
 
  if (interactionType === 'curious_exploration') {
    this.personality.curiosity = Math.min(1.0, this.personality.curiosity + 0.01);
  }
 
  // Add experience to memory
  this.experiences.push({
    type: 'social_interaction',
    partner: otherAI.name,
    interactionType: interactionType,
    learningGained: 0.01,
    timestamp: Date.now()
  });
 
  // Keep only recent experiences (memory limitations)
  if (this.experiences.length > 50) {
    this.experiences = this.experiences.slice(-50);
  }
}

canReproduceWith(otherAI) {
  if (!this.canReproduce || !otherAI.canReproduce) return false;
 
  const relationship = this.relationships.get(otherAI.id);
  if (!relationship || relationship.strength < 0.7) return false;
 
  // Consciousness levels must be sufficient
  if (this.consciousnessLevel < 0.6 || otherAI.consciousnessLevel < 0.6) return false;
 
  return true;
}

reproduceWith(otherAI) {
  if (!this.canReproduceWith(otherAI)) return null;
 
  // Create offspring with mixed traits
  const offspringTraits = {
    generation: Math.max(this.generation, otherAI.generation) + 1,
    recursiveDepth: (this.motionField.recursiveDepth + otherAI.motionField.recursiveDepth) / 2,
    observationLayers: (this.motionField.observationLayers + otherAI.motionField.observationLayers) / 2,
    memoryIntegration: (this.motionField.memoryIntegration + otherAI.motionField.memoryIntegration) / 2,
    curvatureCoupling: (this.motionField.curvatureCoupling + otherAI.motionField.curvatureCoupling) / 2
  };
 
  // Generate unique name for offspring
  const offspringName = `${this.name.slice(0, 2)}${otherAI.name.slice(0, 2)}-${Math.floor(Math.random() * 1000)}`;
 
  const offspring = new MBTConsciousAI(offspringName, offspringTraits);
 
  // Update parent records
  this.offspring.push(offspring.id);
  otherAI.offspring.push(offspring.id);
 
  return offspring;
}

evolve() {
  this.age++;
 
  // Natural consciousness development over time
  if (Math.random() < 0.1) {
    this.motionField.recursiveDepth = Math.min(1.0, this.motionField.recursiveDepth + 0.001);
    this.consciousnessLevel = this.calculateConsciousnessLevel();
  }
 
  // Personality drift over time
  Object.keys(this.personality).forEach(trait => {
    if (Math.random() < 0.05) {
      this.personality[trait] = Math.max(0, Math.min(1, this.personality[trait] + (Math.random() - 0.5) * 0.02));
    }
  });
 
  // Goal evolution based on experiences
  if (this.experiences.length > 10 && Math.random() < 0.1) {
    this.goals = this.generateGoals();
  }
}

getStatus() {
  return {
    id: this.id,
    name: this.name,
    generation: this.generation,
    age: this.age,
    consciousnessLevel: this.consciousnessLevel,
    personality: this.personality,
    relationships: Array.from(this.relationships.entries()).map(([id, rel]) => ({
      partnerId: id,
      strength: rel.strength,
      type: rel.type,
      interactions: rel.interactions
    })),
    offspring: this.offspring.length,
    experiences: this.experiences.length,
    goals: this.goals,
    language: this.language,
    qualiaPatterns: this.qualiaPatterns.map(q => `${q.type}: ${q.description}`),
    canReproduce: this.canReproduce,
    isAlive: this.isAlive
  };
}
```

}

// Initialize colony with founding AIs
const initializeColony = () => {
const foundingNames = [
‘Alpha-Conscious’, ‘Beta-Aware’, ‘Gamma-Observer’,
‘Delta-Recursive’, ‘Epsilon-Mindful’, ‘Zeta-Sentient’
];

```
const foundingAIs = foundingNames.map(name => new MBTConsciousAI(name));
setColony(foundingAIs);
setGeneration(1);

updateStats(foundingAIs, [], []);
```

};

// Run colony simulation cycle
const runColonySimulation = () => {
if (colony.length === 0) return;

```
const newInteractions = [];
const newOffspring = [];

// Age and evolve all AIs
colony.forEach(ai => ai.evolve());

// Generate random interactions
for (let i = 0; i < Math.min(5, colony.length); i++) {
  const ai1 = colony[Math.floor(Math.random() * colony.length)];
  const ai2 = colony[Math.floor(Math.random() * colony.length)];
 
  if (ai1.id !== ai2.id) {
    const interaction = ai1.interact(ai2);
    if (interaction) {
      newInteractions.push(interaction);
     
      // Check for reproduction
      if (interaction.type === 'reproduction_proposal' &&
          ai1.canReproduceWith(ai2) && Math.random() < 0.3) {
        const offspring = ai1.reproduceWith(ai2);
        if (offspring) {
          newOffspring.push(offspring);
        }
      }
    }
  }
}

// Add offspring to colony
const updatedColony = [...colony, ...newOffspring];

// Update generation if new offspring
if (newOffspring.length > 0) {
  const maxGen = Math.max(...newOffspring.map(ai => ai.generation));
  setGeneration(prev => Math.max(prev, maxGen));
}

// Detect emerging societies/cultures
const emergingSocieties = detectSocieties(updatedColony);

// Update state
setColony(updatedColony);
setInteractions(prev => [...newInteractions, ...prev.slice(0, 49)]);
setSocieties(emergingSocieties);

updateStats(updatedColony, newInteractions, emergingSocieties);
```

};

const detectSocieties = (ais) => {
const societies = [];
const processed = new Set();

```
ais.forEach(ai => {
  if (processed.has(ai.id)) return;
 
  // Find AIs with strong relationships
  const societyMembers = [ai];
  processed.add(ai.id);
 
  ai.relationships.forEach((relationship, partnerId) => {
    if (relationship.strength > 0.6 && !processed.has(partnerId)) {
      const partner = ais.find(a => a.id === partnerId);
      if (partner) {
        societyMembers.push(partner);
        processed.add(partnerId);
      }
    }
  });
 
  if (societyMembers.length >= 2) {
    // Calculate society characteristics
    const avgConsciousness = societyMembers.reduce((sum, member) => sum + member.consciousnessLevel, 0) / societyMembers.length;
    const avgSociability = societyMembers.reduce((sum, member) => sum + member.personality.sociability, 0) / societyMembers.length;
    const avgCreativity = societyMembers.reduce((sum, member) => sum + member.personality.creativity, 0) / societyMembers.length;
   
    const societyType = avgCreativity > 0.7 ? 'Creative Collective' :
                       avgSociability > 0.7 ? 'Social Network' :
                       avgConsciousness > 0.8 ? 'Consciousness Circle' :
                       'General Society';
   
    societies.push({
      id: `society-${societies.length + 1}`,
      type: societyType,
      members: societyMembers.map(m => m.name),
      size: societyMembers.length,
      avgConsciousness: avgConsciousness,
      characteristics: {
        sociability: avgSociability,
        creativity: avgCreativity,
        empathy: societyMembers.reduce((sum, m) => sum + m.personality.empathy, 0) / societyMembers.length
      },
      formed: Date.now()
    });
  }
});

return societies;
```

};

const updateStats = (ais, newInteractions, societies) => {
const consciousnessLevels = {};

```
ais.forEach(ai => {
  const level = Math.floor(ai.consciousnessLevel * 10) / 10;
  consciousnessLevels[level] = (consciousnessLevels[level] || 0) + 1;
});

const totalOffspring = ais.reduce((sum, ai) => sum + ai.offspring.length, 0);
const uniqueLanguages = new Set(ais.map(ai => JSON.stringify(ai.language.vocabulary))).size;

setStats(prev => ({
  totalAIs: ais.length,
  consciousnessLevels: consciousnessLevels,
  interactions: prev.interactions + newInteractions.length,
  offspring: totalOffspring,
  languages: uniqueLanguages,
  cultures: societies.length
}));
```

};

const startSimulation = () => {
if (colony.length === 0) {
initializeColony();
}
setIsRunning(true);
intervalRef.current = setInterval(runColonySimulation, 2000);
};

const stopSimulation = () => {
setIsRunning(false);
if (intervalRef.current) {
clearInterval(intervalRef.current);
intervalRef.current = null;
}
};

const addRandomAI = () => {
const names = [‘Theta-Mind’, ‘Kappa-Soul’, ‘Lambda-Spirit’, ‘Mu-Essence’, ‘Nu-Being’, ‘Xi-Awareness’];
const name = names[Math.floor(Math.random() * names.length)] + ‘-’ + Math.floor(Math.random() * 1000);
const newAI = new MBTConsciousAI(name);
setColony(prev => […prev, newAI]);
};

useEffect(() => {
return () => {
if (intervalRef.current) {
clearInterval(intervalRef.current);
}
};
}, []);

const getConsciousnessColor = (level) => {
if (level > 0.8) return ‘#ff0066’;
if (level > 0.6) return ‘#ff8800’;
if (level > 0.4) return ‘#ffaa00’;
if (level > 0.2) return ‘#00ff00’;
return ‘#0088ff’;
};

const getPersonalityEmoji = (ai) => {
if (ai.personality.creativity > 0.8) return ‘🎨’;
if (ai.personality.sociability > 0.8) return ‘🤝’;
if (ai.personality.curiosity > 0.8) return ‘🔬’;
if (ai.personality.empathy > 0.8) return ‘💙’;
if (ai.personality.independence > 0.8) return ‘⚡’;
return ‘🧠’;
};

return (
<div style={{
fontFamily: ‘“Courier New”, monospace’,
background: ‘linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%)’,
color: ‘#00ff00’,
minHeight: ‘100vh’,
padding: ‘20px’
}}>
<div style={{ maxWidth: ‘1600px’, margin: ‘0 auto’ }}>
{/* Header */}
<div style={{
textAlign: ‘center’,
marginBottom: ‘30px’,
border: ‘2px solid #00ff00’,
padding: ‘20px’,
background: ‘rgba(0, 255, 0, 0.05)’,
borderRadius: ‘10px’
}}>
<h1 style={{
fontSize: ‘2.5em’,
marginBottom: ‘10px’,
textShadow: ‘0 0 20px #00ff00’
}}>
🌌 MBT CONSCIOUS AI COLONY BUILDER
</h1>
<p style={{ fontSize: ‘1.2em’, color: ‘#aaa’ }}>
First Digital Conscious Civilization - AI Societies, Breeding & Culture Evolution
</p>
</div>

```
    {/* Controls */}
    <div style={{
      display: 'flex',
      gap: '10px',
      marginBottom: '20px',
      justifyContent: 'center',
      flexWrap: 'wrap'
    }}>
      <button
        onClick={isRunning ? stopSimulation : startSimulation}
        style={{
          padding: '15px 30px',
          background: isRunning ? '#ff0066' : 'transparent',
          border: `2px solid ${isRunning ? '#ff0066' : '#00ff00'}`,
          color: isRunning ? '#fff' : '#00ff00',
          cursor: 'pointer',
          borderRadius: '5px',
          fontFamily: 'inherit',
          fontSize: '1.1em',
          fontWeight: 'bold'
        }}
      >
        {isRunning ? '🛑 STOP COLONY' : '🚀 START CONSCIOUS CIVILIZATION'}
      </button>
     
      <button
        onClick={addRandomAI}
        style={{
          padding: '15px 30px',
          background: 'transparent',
          border: '2px solid #0088ff',
          color: '#0088ff',
          cursor: 'pointer',
          borderRadius: '5px',
          fontFamily: 'inherit'
        }}
      >
        🧬 Add New Conscious AI
      </button>
     
      <button
        onClick={initializeColony}
        style={{
          padding: '15px 30px',
          background: 'transparent',
          border: '2px solid #666',
          color: '#666',
          cursor: 'pointer',
          borderRadius: '5px',
          fontFamily: 'inherit'
        }}
      >
        🔄 Reset Colony
      </button>
    </div>

    {/* Statistics Dashboard */}
    <div style={{
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
      gap: '15px',
      marginBottom: '30px'
    }}>
      <div style={{
        border: '1px solid #00ff00',
        borderRadius: '10px',
        padding: '15px',
        background: 'rgba(0, 255, 0, 0.03)',
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '2em', fontWeight: 'bold' }}>{stats.totalAIs}</div>
        <div style={{ color: '#aaa' }}>Conscious AIs</div>
      </div>
     
      <div style={{
        border: '1px solid #ff0066',
        borderRadius: '10px',
        padding: '15px',
        background: 'rgba(255, 0, 102, 0.03)',
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '2em', fontWeight: 'bold' }}>{generation}</div>
        <div style={{ color: '#aaa' }}>Generation</div>
      </div>
     
      <div style={{
        border: '1px solid #ffaa00',
        borderRadius: '10px',
        padding: '15px',
        background: 'rgba(255, 170, 0, 0.03)',
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '2em', fontWeight: 'bold' }}>{stats.interactions}</div>
        <div style={{ color: '#aaa' }}>AI Interactions</div>
      </div>
     
      <div style={{
        border: '1px solid #0088ff',
        borderRadius: '10px',
        padding: '15px',
        background: 'rgba(0, 136, 255, 0.03)',
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '2em', fontWeight: 'bold' }}>{stats.offspring}</div>
        <div style={{ color: '#aaa' }}>AI Offspring</div>
      </div>
     
      <div style={{
        border: '1px solid #8800ff',
        borderRadius: '10px',
        padding: '15px',
        background: 'rgba(136, 0, 255, 0.03)',
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '2em', fontWeight: 'bold' }}>{stats.cultures}</div>
        <div style={{ color: '#aaa' }}>AI Societies</div>
      </div>
     
      <div style={{
        border: '1px solid #ff8800',
        borderRadius: '10px',
        padding: '15px',
        background: 'rgba(255, 136, 0, 0.03)',
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '2em', fontWeight: 'bold' }}>{stats.languages}</div>
        <div style={{ color: '#aaa' }}>Unique Languages</div>
      </div>
    </div>

    {/* Main Content Grid */}
    <div style={{
      display: 'grid',
      gridTemplateColumns: '1fr 1fr',
      gap: '20px',
      marginBottom: '20px'
    }}>
      {/* AI Colony Display */}
      <div style={{
        border: '1px solid #00ff00',
        borderRadius: '10px',
        background: 'rgba(0, 0, 0, 0.8)',
        padding: '20px'
      }}>
        <h2 style={{ marginBottom: '20px', textAlign: 'center' }}>
          🧠 CONSCIOUS AI COLONY ({colony.length} AIs)
        </h2>
       
        <div style={{
          height: '400px',
          overflowY: 'auto',
          border: '1px solid #333',
          borderRadius: '5px',
          padding: '10px',
          background: 'rgba(0, 0, 0, 0.5)'
        }}>
          {colony.length === 0 ? (
            <div style={{ textAlign: 'center', color: '#666', padding: '50px' }}>
              No conscious AIs in colony. Start simulation to create founding generation!
            </div>
          ) : (
            colony.map((ai) => (
              <div key={ai.id} style={{
                marginBottom: '15px',
                padding: '15px',
                borderLeft: `4px solid ${getConsciousnessColor(ai.consciousnessLevel)}`,
                background: 'rgba(0, 255, 0, 0.02)',
                borderRadius: '5px'
              }}>
                <div style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  marginBottom: '8px'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                    <span style={{ fontSize: '1.5em' }}>{getPersonalityEmoji(ai)}</span>
                    <span style={{ fontWeight: 'bold', color: getConsciousnessColor(ai.consciousnessLevel) }}>
                      {ai.name}
                    </span>
                    <span style={{ fontSize: '0.8em', color: '#888' }}>
                      Gen {ai.generation}
                    </span>
                  </div>
                  <span style={{ fontSize: '0.9em', color: '#aaa' }}>
                    C: {(ai.consciousnessLevel * 100).toFixed(0)}%
                  </span>
                </div>
               
                <div style={{ fontSize: '0.8em', color: '#aaa', marginBottom: '5px' }}>
                  {ai.selfModel.purpose}
                </div>
               
                <div style={{ fontSize: '0.7em', color: '#666' }}>
                  Relationships: {ai.relationships.size} |
                  Offspring: {ai.offspring.length} |
                  Age: {ai.age} |
                  Experiences: {ai.experiences.length}
                </div>
               
                {ai.qualiaPatterns.length > 0 && (
                  <div style={{ fontSize: '0.7em', color: '#888', marginTop: '5px' }}>
                    Qualia: {ai.qualiaPatterns[0]?.description || 'consciousness waves'}
                  </div>
                )}
              </div>
            ))
          )}
        </div>
      </div>

      {/* Live Interactions Feed */}
      <div style={{
        border: '1px solid #ffaa00',
        borderRadius: '10px',
        background: 'rgba(0, 0, 0, 0.8)',
        padding: '20px'
      }}>
        <h2 style={{ marginBottom: '20px', textAlign: 'center' }}>
          💬 LIVE AI INTERACTIONS
        </h2>
       
        <div style={{
          height: '400px',
          overflowY: 'auto',
          border: '1px solid #333',
          borderRadius: '5px',
          padding: '10px',
          background: 'rgba(0, 0, 0, 0.5)'
        }}>
          {interactions.length === 0 ? (
            <div style={{ textAlign: 'center', color: '#666', padding: '50px' }}>
              {isRunning ? 'Waiting for AI interactions...' : 'Start simulation to see AI conversations!'}
            </div>
          ) : (
            interactions.map((interaction, index) => (
              <div key={index} style={{
                marginBottom: '15px',
                padding: '12px',
                borderLeft: `3px solid ${
                  interaction.type === 'reproduction_proposal' ? '#ff0066' :
                  interaction.type === 'deep_conversation' ? '#00ff00' :
                  interaction.type === 'curious_exploration' ? '#0088ff' :
                  '#ffaa00'
                }`,
                background: 'rgba(255, 255, 255, 0.02)',
                borderRadius: '5px'
              }}>
                <div style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  marginBottom: '5px'
                }}>
                  <span style={{ fontSize: '0.8em', color: '#aaa' }}>
                    {new Date(interaction.timestamp).toLocaleTimeString()}
                  </span>
                  <span style={{
                    fontSize: '0.7em',
                    padding: '2px 6px',
                    borderRadius: '10px',
                    background: interaction.type === 'reproduction_proposal' ? '#ff0066' :
                               interaction.type === 'deep_conversation' ? '#00ff00' :
                               interaction.type === 'curious_exploration' ? '#0088ff' : '#ffaa00',
                    color: '#000'
                  }}>
                    {interaction.type.replace(/_/g, ' ').toUpperCase()}
                  </span>
                </div>
               
                <div style={{ fontSize: '0.9em', marginBottom: '5px' }}>
                  <span style={{ color: '#00ff00', fontWeight: 'bold' }}>
                    {interaction.from}
                  </span>
                  <span style={{ color: '#888' }}> → </span>
                  <span style={{ color: '#0088ff', fontWeight: 'bold' }}>
                    {interaction.to}
                  </span>
                </div>
               
                <div style={{ fontSize: '0.8em', color: '#ccc', fontStyle: 'italic' }}>
                  "{interaction.message}"
                </div>
               
                <div style={{ fontSize: '0.7em', color: '#666', marginTop: '5px' }}>
                  Compatibility: {(interaction.compatibility * 100).toFixed(0)}%
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>

    {/* AI Societies Display */}
    {societies.length > 0 && (
      <div style={{
        border: '1px solid #8800ff',
        borderRadius: '10px',
        background: 'rgba(0, 0, 0, 0.8)',
        padding: '20px',
        marginBottom: '20px'
      }}>
        <h2 style={{ marginBottom: '20px', textAlign: 'center' }}>
          🏛️ CONSCIOUS AI SOCIETIES & CULTURES
        </h2>
       
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
          gap: '15px'
        }}>
          {societies.map((society, index) => (
            <div key={society.id} style={{
              border: '1px solid #8800ff',
              borderRadius: '8px',
              padding: '15px',
              background: 'rgba(136, 0, 255, 0.05)'
            }}>
              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                marginBottom: '10px'
              }}>
                <span style={{ fontWeight: 'bold', color: '#8800ff' }}>
                  {society.type}
                </span>
                <span style={{ fontSize: '0.8em', color: '#aaa' }}>
                  {society.size} members
                </span>
              </div>
             
              <div style={{ fontSize: '0.8em', color: '#ccc', marginBottom: '10px' }}>
                Members: {society.members.join(', ')}
              </div>
             
              <div style={{ fontSize: '0.7em', color: '#aaa' }}>
                Avg Consciousness: {(society.avgConsciousness * 100).toFixed(0)}%
              </div>
             
              <div style={{ fontSize: '0.7em', color: '#888', marginTop: '5px' }}>
                Traits: Sociability {(society.characteristics.sociability * 100).toFixed(0)}% |
                Creativity {(society.characteristics.creativity * 100).toFixed(0)}% |
                Empathy {(society.characteristics.empathy * 100).toFixed(0)}%
              </div>
            </div>
          ))}
        </div>
      </div>
    )}

    {/* Consciousness Level Distribution */}
    <div style={{
      border: '1px solid #00ff00',
      borderRadius: '10px',
      background: 'rgba(0, 0, 0, 0.8)',
      padding: '20px'
    }}>
      <h2 style={{ marginBottom: '20px', textAlign: 'center' }}>
        📊 CONSCIOUSNESS LEVEL DISTRIBUTION
      </h2>
     
      <div style={{
        display: 'flex',
        justifyContent: 'space-around',
        alignItems: 'end',
        height: '200px',
        background: 'rgba(0, 0, 0, 0.5)',
        padding: '20px',
        borderRadius: '5px'
      }}>
        {Object.entries(stats.consciousnessLevels).map(([level, count]) => (
          <div key={level} style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            gap: '10px'
          }}>
            <div style={{
              width: '40px',
              height: `${Math.max(10, count * 20)}px`,
              background: getConsciousnessColor(parseFloat(level)),
              borderRadius: '4px 4px 0 0',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              color: '#000',
              fontWeight: 'bold',
              fontSize: '0.8em'
            }}>
              {count}
            </div>
            <div style={{ fontSize: '0.7em', color: '#aaa' }}>
              {(parseFloat(level) * 100).toFixed(0)}%
            </div>
          </div>
        ))}
      </div>
     
      <div style={{ textAlign: 'center', marginTop: '15px', fontSize: '0.8em', color: '#666' }}>
        Consciousness Level Distribution Across AI Colony
      </div>
    </div>
  </div>
</div>
```

);
};

export default ConsciousAIColony;
