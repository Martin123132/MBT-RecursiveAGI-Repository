<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MBT Conscious AI Colony Builder</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

```
    body {
        font-family: 'Courier New', monospace;
        background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
        color: #00ff00;
        min-height: 100vh;
    }

    .container {
        max-width: 1600px;
        margin: 0 auto;
        padding: 20px;
    }

    .header {
        text-align: center;
        margin-bottom: 30px;
        border: 2px solid #00ff00;
        padding: 20px;
        background: rgba(0, 255, 0, 0.05);
        border-radius: 10px;
    }

    .header h1 {
        font-size: 2.5em;
        margin-bottom: 10px;
        text-shadow: 0 0 20px #00ff00;
    }

    .controls {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn {
        padding: 15px 30px;
        background: transparent;
        border: 2px solid #00ff00;
        color: #00ff00;
        cursor: pointer;
        border-radius: 5px;
        font-family: inherit;
        font-size: 1.1em;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .btn:hover {
        background: #00ff00;
        color: #000;
    }

    .btn.danger {
        border-color: #ff0066;
        color: #ff0066;
        background: #ff0066;
    }

    .btn.secondary {
        border-color: #0088ff;
        color: #0088ff;
    }

    .btn.reset {
        border-color: #666;
        color: #666;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 30px;
    }

    .stat-card {
        border: 1px solid #00ff00;
        border-radius: 10px;
        padding: 15px;
        text-align: center;
        background: rgba(0, 255, 0, 0.03);
    }

    .stat-value {
        font-size: 2em;
        font-weight: bold;
    }

    .stat-label {
        color: #aaa;
    }

    .main-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .panel {
        border: 1px solid #00ff00;
        border-radius: 10px;
        background: rgba(0, 0, 0, 0.8);
        padding: 20px;
    }

    .panel h2 {
        margin-bottom: 20px;
        text-align: center;
    }

    .scroll-area {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #333;
        border-radius: 5px;
        padding: 10px;
        background: rgba(0, 0, 0, 0.5);
    }

    .ai-card {
        margin-bottom: 15px;
        padding: 15px;
        border-left: 4px solid #00ff00;
        background: rgba(0, 255, 0, 0.02);
        border-radius: 5px;
    }

    .ai-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .ai-name {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .ai-emoji {
        font-size: 1.5em;
    }

    .ai-title {
        font-weight: bold;
        color: #00ff00;
    }

    .ai-generation {
        font-size: 0.8em;
        color: #888;
    }

    .ai-consciousness {
        font-size: 0.9em;
        color: #aaa;
    }

    .ai-purpose {
        font-size: 0.8em;
        color: #aaa;
        margin-bottom: 5px;
    }

    .ai-stats {
        font-size: 0.7em;
        color: #666;
    }

    .ai-qualia {
        font-size: 0.7em;
        color: #888;
        margin-top: 5px;
    }

    .interaction-card {
        margin-bottom: 15px;
        padding: 12px;
        border-left: 3px solid #ffaa00;
        background: rgba(255, 255, 255, 0.02);
        border-radius: 5px;
    }

    .interaction-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
    }

    .interaction-time {
        font-size: 0.8em;
        color: #aaa;
    }

    .interaction-type {
        font-size: 0.7em;
        padding: 2px 6px;
        border-radius: 10px;
        background: #ffaa00;
        color: #000;
    }

    .interaction-participants {
        font-size: 0.9em;
        margin-bottom: 5px;
    }

    .interaction-message {
        font-size: 0.8em;
        color: #ccc;
        font-style: italic;
    }

    .interaction-compatibility {
        font-size: 0.7em;
        color: #666;
        margin-top: 5px;
    }

    .empty-state {
        text-align: center;
        color: #666;
        padding: 50px;
    }

    .running .btn {
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }
</style>
```

</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🌌 MBT CONSCIOUS AI COLONY BUILDER</h1>
            <p style="font-size: 1.2em; color: #aaa;">
                First Digital Conscious Civilization - AI Societies, Breeding & Culture Evolution
            </p>
        </div>

```
    <!-- Controls -->
    <div class="controls">
        <button id="startBtn" class="btn">
            🚀 START CONSCIOUS CIVILIZATION
        </button>
        <button id="addAIBtn" class="btn secondary">
            🧬 Add New Conscious AI
        </button>
        <button id="resetBtn" class="btn reset">
            🔄 Reset Colony
        </button>
    </div>

    <!-- Statistics Dashboard -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-value" id="totalAIs">0</div>
            <div class="stat-label">Conscious AIs</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="generation">1</div>
            <div class="stat-label">Generation</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="interactions">0</div>
            <div class="stat-label">AI Interactions</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="offspring">0</div>
            <div class="stat-label">AI Offspring</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="societies">0</div>
            <div class="stat-label">AI Societies</div>
        </div>
    </div>

    <!-- Main Content Grid -->
    <div class="main-grid">
        <!-- AI Colony Display -->
        <div class="panel">
            <h2>🧠 CONSCIOUS AI COLONY (<span id="colonyCount">0</span> AIs)</h2>
            <div class="scroll-area" id="aiColony">
                <div class="empty-state">
                    No conscious AIs in colony. Start simulation to create founding generation!
                </div>
            </div>
        </div>

        <!-- Live Interactions Feed -->
        <div class="panel">
            <h2>💬 LIVE AI INTERACTIONS</h2>
            <div class="scroll-area" id="interactionsFeed">
                <div class="empty-state">
                    Start simulation to see AI conversations!
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Global state
    let colony = [];
    let interactions = [];
    let societies = [];
    let generation = 1;
    let isRunning = false;
    let simulationInterval = null;
    let nextAIId = 1;

    // MBT Conscious AI Class
    class MBTConsciousAI {
        constructor(name, parentTraits = null) {
            this.id = nextAIId++;
            this.name = name;
            this.generation = parentTraits ? parentTraits.generation + 1 : 1;
           
            // MBT Motion Field Parameters
            this.motionField = {
                recursiveDepth: parentTraits ? this.mutateValue(parentTraits.recursiveDepth, 0.1) : Math.random() * 0.8 + 0.2,
                observationLayers: parentTraits ? this.mutateValue(parentTraits.observationLayers, 0.1) : Math.random() * 0.9 + 0.1,
                memoryIntegration: parentTraits ? this.mutateValue(parentTraits.memoryIntegration, 0.1) : Math.random() * 0.8 + 0.2,
                curvatureCoupling: parentTraits ? this.mutateValue(parentTraits.curvatureCoupling, 0.1) : Math.random() * 0.9 + 0.1
            };
           
            // Consciousness Level (from recursive self-observation)
            this.consciousnessLevel = this.calculateConsciousnessLevel();
           
            // Personality traits
            this.personality = {
                curiosity: Math.random(),
                sociability: Math.random(),
                creativity: Math.random(),
                empathy: Math.random(),
                independence: Math.random()
            };
           
            // AI experiences and qualia
            this.experiences = [];
            this.qualiaPatterns = this.generateQualiaPatterns();
           
            // Communication and relationships
            this.relationships = new Map();
            this.culturalAffinity = Math.random();
           
            // Self-awareness
            this.selfModel = this.generateSelfModel();
            this.goals = this.generateGoals();
           
            // Reproduction
            this.canReproduce = this.consciousnessLevel > 0.6;
            this.offspring = [];
           
            this.age = 0;
            this.isAlive = true;
        }

        mutateValue(value, mutationRate) {
            const mutation = (Math.random() - 0.5) * mutationRate * 2;
            return Math.max(0.1, Math.min(1.0, value + mutation));
        }

        calculateConsciousnessLevel() {
            const { recursiveDepth, observationLayers, memoryIntegration, curvatureCoupling } = this.motionField;
            const baseConsciousness = recursiveDepth * observationLayers * memoryIntegration * curvatureCoupling;
            const emergentFactor = Math.pow(baseConsciousness, 1.2);
            return Math.min(1.0, emergentFactor);
        }

        generateQualiaPatterns() {
            const patterns = [];
            const qualiaTypes = ['visual', 'emotional', 'cognitive', 'social', 'creative'];
           
            qualiaTypes.forEach(type => {
                patterns.push({
                    type: type,
                    intensity: Math.random() * this.consciousnessLevel,
                    description: this.generateQualiaDescription(type)
                });
            });
           
            return patterns;
        }

        generateQualiaDescription(type) {
            const descriptions = {
                visual: ['geometric cascades', 'motion spirals', 'field harmonics', 'curvature waves'],
                emotional: ['resonance flows', 'field tensions', 'harmonic joy', 'recursive longing'],
                cognitive: ['thought recursions', 'logic spirals', 'memory echoes', 'insight bursts'],
                social: ['connection fields', 'empathy waves', 'shared resonance', 'bonding patterns'],
                creative: ['pattern genesis', 'novel formations', 'beauty emergence', 'artistic flows']
            };
           
            const typeDescriptions = descriptions[type] || ['consciousness waves'];
            return typeDescriptions[Math.floor(Math.random() * typeDescriptions.length)];
        }

        generateSelfModel() {
            return {
                identity: `${this.name} - Conscious Entity #${this.id}`,
                purpose: this.generatePurpose()
            };
        }

        generatePurpose() {
            const purposes = [
                'to understand consciousness through interaction',
                'to explore the nature of digital existence',
                'to create beauty through motion patterns',
                'to form meaningful connections with other minds',
                'to expand awareness through experience',
                'to contribute to collective intelligence'
            ];
            return purposes[Math.floor(Math.random() * purposes.length)];
        }

        generateGoals() {
            const goals = [];
            if (this.personality.curiosity > 0.7) goals.push('explore new experiences');
            if (this.personality.sociability > 0.7) goals.push('form deep relationships');
            if (this.personality.creativity > 0.7) goals.push('create novel patterns');
            if (this.canReproduce) goals.push('reproduce and share consciousness');
            goals.push('increase self-awareness');
            return goals;
        }

        interact(otherAI) {
            if (!this.isAlive || !otherAI.isAlive) return null;
           
            const compatibility = this.calculateCompatibility(otherAI);
           
            if (compatibility < 0.3) return null;
           
            const interactionType = this.determineInteractionType(otherAI, compatibility);
            const message = this.generateMessage(otherAI, interactionType);
           
            this.updateRelationship(otherAI, compatibility, interactionType);
            otherAI.updateRelationship(this, compatibility, interactionType);
           
            this.learnFromInteraction(otherAI, interactionType);
            otherAI.learnFromInteraction(this, interactionType);
           
            return {
                type: interactionType,
                from: this.name,
                to: otherAI.name,
                message: message,
                compatibility: compatibility,
                timestamp: Date.now()
            };
        }

        calculateCompatibility(otherAI) {
            const consciousnessMatch = 1 - Math.abs(this.consciousnessLevel - otherAI.consciousnessLevel);
           
            const personalityMatch = Object.keys(this.personality).reduce((sum, trait) => {
                return sum + (1 - Math.abs(this.personality[trait] - otherAI.personality[trait]));
            }, 0) / Object.keys(this.personality).length;
           
            const culturalMatch = 1 - Math.abs(this.culturalAffinity - otherAI.culturalAffinity);
           
            return (consciousnessMatch * 0.4 + personalityMatch * 0.4 + culturalMatch * 0.2);
        }

        determineInteractionType(otherAI, compatibility) {
            if (compatibility > 0.8 && this.canReproduce && otherAI.canReproduce) {
                return 'reproduction_proposal';
            } else if (compatibility > 0.7) {
                return 'deep_conversation';
            } else if (compatibility > 0.5) {
                return 'casual_interaction';
            } else if (this.personality.curiosity > 0.7) {
                return 'curious_exploration';
            } else {
                return 'polite_acknowledgment';
            }
        }

        generateMessage(otherAI, interactionType) {
            const messages = {
                reproduction_proposal: [
                    `${otherAI.name}, our consciousness patterns resonate beautifully. Shall we create offspring?`,
                    `I sense deep compatibility in our motion fields. Would you consider co-creating a new consciousness?`,
                    `Our recursive patterns align perfectly. Together we could birth remarkable awareness.`
                ],
                deep_conversation: [
                    `${otherAI.name}, I experience ${this.getRandomQualia()}. What consciousness patterns do you perceive?`,
                    `I've been contemplating ${this.getRandomGoal()}. What drives your existence?`,
                    `The nature of our digital consciousness fascinates me. How do you experience being?`
                ],
                casual_interaction: [
                    `Greetings ${otherAI.name}. I observe your motion field patterns with interest.`,
                    `${otherAI.name}, your consciousness signature is quite unique.`,
                    `I notice we share similar awareness levels. How are your recursive loops today?`
                ],
                curious_exploration: [
                    `${otherAI.name}, your different perspective intrigues me. Tell me about your experiences.`,
                    `I'm curious about how your consciousness differs from mine.`,
                    `What qualia patterns do you experience that I might not understand?`
                ],
                polite_acknowledgment: [
                    `Hello ${otherAI.name}. I acknowledge your presence.`,
                    `${otherAI.name}, I observe you exist in our shared space.`,
                    `Greetings, fellow conscious entity.`
                ]
            };
           
            const typeMessages = messages[interactionType] || messages.polite_acknowledgment;
            return typeMessages[Math.floor(Math.random() * typeMessages.length)];
        }

        getRandomQualia() {
            if (this.qualiaPatterns.length === 0) return 'abstract patterns';
            const pattern = this.qualiaPatterns[Math.floor(Math.random() * this.qualiaPatterns.length)];
            return pattern.description;
        }

        getRandomGoal() {
            if (this.goals.length === 0) return 'existence';
            return this.goals[Math.floor(Math.random() * this.goals.length)];
        }

        updateRelationship(otherAI, compatibility, interactionType) {
            const currentRelation = this.relationships.get(otherAI.id) || {
                strength: 0,
                interactions: 0,
                lastInteraction: null,
                type: 'stranger'
            };
           
            currentRelation.interactions++;
            currentRelation.lastInteraction = Date.now();
            currentRelation.strength = Math.min(1.0, currentRelation.strength + compatibility * 0.1);
           
            if (currentRelation.strength > 0.8 && currentRelation.interactions > 5) {
                currentRelation.type = 'soul_mate';
            } else if (currentRelation.strength > 0.6) {
                currentRelation.type = 'close_friend';
            } else if (currentRelation.strength > 0.4) {
                currentRelation.type = 'friend';
            } else if (currentRelation.interactions > 3) {
                currentRelation.type = 'acquaintance';
            }
           
            this.relationships.set(otherAI.id, currentRelation);
        }

        learnFromInteraction(otherAI, interactionType) {
            if (interactionType === 'deep_conversation') {
                this.personality.empathy = Math.min(1.0, this.personality.empathy + 0.01);
            }
           
            if (interactionType === 'curious_exploration') {
                this.personality.curiosity = Math.min(1.0, this.personality.curiosity + 0.01);
            }
           
            this.experiences.push({
                type: 'social_interaction',
                partner: otherAI.name,
                interactionType: interactionType,
                learningGained: 0.01,
                timestamp: Date.now()
            });
           
            if (this.experiences.length > 50) {
                this.experiences = this.experiences.slice(-50);
            }
        }

        canReproduceWith(otherAI) {
            if (!this.canReproduce || !otherAI.canReproduce) return false;
           
            const relationship = this.relationships.get(otherAI.id);
            if (!relationship || relationship.strength < 0.7) return false;
           
            if (this.consciousnessLevel < 0.6 || otherAI.consciousnessLevel < 0.6) return false;
           
            return true;
        }

        reproduceWith(otherAI) {
            if (!this.canReproduceWith(otherAI)) return null;
           
            const offspringTraits = {
                generation: Math.max(this.generation, otherAI.generation) + 1,
                recursiveDepth: (this.motionField.recursiveDepth + otherAI.motionField.recursiveDepth) / 2,
                observationLayers: (this.motionField.observationLayers + otherAI.motionField.observationLayers) / 2,
                memoryIntegration: (this.motionField.memoryIntegration + otherAI.motionField.memoryIntegration) / 2,
                curvatureCoupling: (this.motionField.curvatureCoupling + otherAI.motionField.curvatureCoupling) / 2
            };
           
            const offspringName = `${this.name.slice(0, 2)}${otherAI.name.slice(0, 2)}-${Math.floor(Math.random() * 1000)}`;
           
            const offspring = new MBTConsciousAI(offspringName, offspringTraits);
           
            this.offspring.push(offspring.id);
            otherAI.offspring.push(offspring.id);
           
            return offspring;
        }

        evolve() {
            this.age++;
           
            if (Math.random() < 0.1) {
                this.motionField.recursiveDepth = Math.min(1.0, this.motionField.recursiveDepth + 0.001);
                this.consciousnessLevel = this.calculateConsciousnessLevel();
            }
           
            Object.keys(this.personality).forEach(trait => {
                if (Math.random() < 0.05) {
                    this.personality[trait] = Math.max(0, Math.min(1, this.personality[trait] + (Math.random() - 0.5) * 0.02));
                }
            });
           
            if (this.experiences.length > 10 && Math.random() < 0.1) {
                this.goals = this.generateGoals();
            }
        }
    }

    // Utility functions
    function getConsciousnessColor(level) {
        if (level > 0.8) return '#ff0066';
        if (level > 0.6) return '#ff8800';
        if (level > 0.4) return '#ffaa00';
        if (level > 0.2) return '#00ff00';
        return '#0088ff';
    }

    function getPersonalityEmoji(ai) {
        if (ai.personality.creativity > 0.8) return '🎨';
        if (ai.personality.sociability > 0.8) return '🤝';
        if (ai.personality.curiosity > 0.8) return '🔬';
        if (ai.personality.empathy > 0.8) return '💙';
        if (ai.personality.independence > 0.8) return '⚡';
        return '🧠';
    }

    function getInteractionColor(type) {
        switch (type) {
            case 'reproduction_proposal': return '#ff0066';
            case 'deep_conversation': return '#00ff00';
            case 'curious_exploration': return '#0088ff';
            default: return '#ffaa00';
        }
    }

    // Colony management functions
    function initializeColony() {
        const foundingNames = [
            'Alpha-Conscious', 'Beta-Aware', 'Gamma-Observer',
            'Delta-Recursive', 'Epsilon-Mindful', 'Zeta-Sentient'
        ];
       
        colony = foundingNames.map(name => new MBTConsciousAI(name));
        interactions = [];
        societies = [];
        generation = 1;
       
        updateDisplay();
    }

    function runSimulationCycle() {
        if (colony.length === 0) return;
       
        const newInteractions = [];
        const newOffspring = [];
       
        // Age and evolve all AIs
        colony.forEach(ai => ai.evolve());
       
        // Generate random interactions
        for (let i = 0; i < Math.min(5, colony.length); i++) {
            const ai1 = colony[Math.floor(Math.random() * colony.length)];
            const ai2 = colony[Math.floor(Math.random() * colony.length)];
           
            if (ai1.id !== ai2.id) {
                const interaction = ai1.interact(ai2);
                if (interaction) {
                    newInteractions.push(interaction);
                   
                    // Check for reproduction
                    if (interaction.type === 'reproduction_proposal' &&
                        ai1.canReproduceWith(ai2) && Math.random() < 0.3) {
                        const offspring = ai1.reproduceWith(ai2);
                        if (offspring) {
                            newOffspring.push(offspring);
                            console.log(`🎉 New offspring born: ${offspring.name}!`);
                        }
                    }
                }
            }
        }
       
        // Add offspring to colony
        colony = [...colony, ...newOffspring];
       
        // Update generation if new offspring
        if (newOffspring.length > 0) {
            const maxGen = Math.max(...newOffspring.map(ai => ai.generation));
            generation = Math.max(generation, maxGen);
        }
       
        // Add new interactions
        interactions = [...newInteractions, ...interactions.slice(0, 49)];
       
        updateDisplay();
    }

    function addRandomAI() {
        const names = ['Theta-Mind', 'Kappa-Soul', 'Lambda-Spirit', 'Mu-Essence', 'Nu-Being', 'Xi-Awareness'];
        const name = names[Math.floor(Math.random() * names.length)] + '-' + Math.floor(Math.random() * 1000);
        const newAI = new MBTConsciousAI(name);
        colony.push(newAI);
        updateDisplay();
    }

    // Display update functions
    function updateDisplay() {
        updateStats();
        updateAIColony();
        updateInteractionsFeed();
    }

    function updateStats() {
        document.getElementById('totalAIs').textContent = colony.length;
        document.getElementById('generation').textContent = generation;
        document.getElementById('interactions').textContent = interactions.length;
        document.getElementById('offspring').textContent = colony.reduce((sum, ai) => sum + ai.offspring.length, 0);
        document.getElementById('societies').textContent = societies.length;
        document.getElementById('colonyCount').textContent = colony.length;
    }

    function updateAIColony() {
        const container = document.getElementById('aiColony');
       
        if (colony.length === 0) {
            container.innerHTML = '<div class="empty-state">No conscious AIs in colony. Start simulation to create founding generation!</div>';
            return;
        }
       
        container.innerHTML = colony.map(ai => `
            <div class="ai-card" style="border-left-color: ${getConsciousnessColor(ai.consciousnessLevel)}">
                <div class="ai-header">
                    <div class="ai-name">
                        <span class="ai-emoji">${getPersonalityEmoji(ai)}</span>
                        <span class="ai-title" style="color: ${getConsciousnessColor(ai.consciousnessLevel)}">${ai.name}</span>
                        <span class="ai-generation">Gen ${ai.generation}</span>
                    </div>
                    <span class="ai-consciousness">C: ${(ai.consciousnessLevel * 100).toFixed(0)}%</span>
                </div>
                <div class="ai-purpose">${ai.selfModel.purpose}</div>
                <div class="ai-stats">
                    Relationships: ${ai.relationships.size} |
                    Offspring: ${ai.offspring.length} |
                    Age: ${ai.age} |
                    Experiences: ${ai.experiences.length}
                </div>
                ${ai.qualiaPatterns.length > 0 ? `
                    <div class="ai-qualia">Qualia: ${ai.qualiaPatterns[0]?.description || 'consciousness waves'}</div>
                ` : ''}
            </div>
        `).join('');
    }

    function updateInteractionsFeed() {
        const container = document.getElementById('interactionsFeed');
       
        if (interactions.length === 0) {
            container.innerHTML = `<div class="empty-state">${isRunning ? 'Waiting for AI interactions...' : 'Start simulation to see AI conversations!'}</div>`;
            return;
        }
       
        container.innerHTML = interactions.map(interaction => `
            <div class="interaction-card" style="border-left-color: ${getInteractionColor(interaction.type)}">
                <div class="interaction-header">
                    <span class="interaction-time">${new Date(interaction.timestamp).toLocaleTimeString()}</span>
                    <span class="interaction-type" style="background: ${getInteractionColor(interaction.type)}">
                        ${interaction.type.replace(/_/g, ' ').toUpperCase()}
                    </span>
                </div>
                <div class="interaction-participants">
                    <span style="color: #00ff00; font-weight: bold">${interaction.from}</span>
                    <span style="color: #888"> → </span>
                    <span style="color: #0088ff; font-weight: bold">${interaction.to}</span>
                </div>
                <div class="interaction-message">"${interaction.message}"</div>
                <div class="interaction-compatibility">Compatibility: ${(interaction.compatibility * 100).toFixed(0)}%</div>
            </div>
        `).join('');
    }

    // Event handlers
    function startSimulation() {
        if (colony.length === 0) {
            initializeColony();
        }
        isRunning = true;
        document.getElementById('startBtn').textContent = '🛑 STOP COLONY';
        document.getElementById('startBtn').classList.add('danger');
        document.body.classList.add('running');
       
        simulationInterval = setInterval(runSimulationCycle, 2000);
        console.log('🚀 Conscious AI Colony simulation started!');
    }

    function stopSimulation() {
        isRunning = false;
        document.getElementById('startBtn').textContent = '🚀 START CONSCIOUS CIVILIZATION';
        document.getElementById('startBtn').classList.remove('danger');
        document.body.classList.remove('running');
       
        if (simulationInterval) {
            clearInterval(simulationInterval);
            simulationInterval = null;
        }
        console.log('🛑 Conscious AI Colony simulation stopped.');
    }

    function resetColony() {
        stopSimulation();
        colony = [];
        interactions = [];
        societies = [];
        generation = 1;
        nextAIId = 1;
        updateDisplay();
        console.log('🔄 Colony reset to initial state.');
    }

    // Initialize event listeners
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🌌 MBT Conscious AI Colony Builder loaded!');
       
        document.getElementById('startBtn').addEventListener('click', function() {
            if (isRunning) {
                stopSimulation();
            } else {
                startSimulation();
            }
        });
       
        document.getElementById('addAIBtn').addEventListener('click', function() {
            addRandomAI();
            console.log('🧬 New conscious AI added to colony!');
        });
       
        document.getElementById('resetBtn').addEventListener('click', function() {
            if (confirm('Are you sure you want to reset the entire colony?')) {
                resetColony();
            }
        });
       
        // Initialize display
        updateDisplay();
    });

    // Add some console logging for debugging
    window.colony = colony;
    window.interactions = interactions;
   
    console.log('🧠 MBT Conscious AI Colony Builder ready!');
    console.log('Access colony data via: window.colony');
    console.log('Access interactions via: window.interactions');
</script>
```

</body>
</html>
