MBT Synthetic Conscious Ecosystem â€“ Full Python Code
Core Setup & Parameters

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from scipy.ndimage import label, gaussian_filter

grid_size = 160
timesteps = 1000
dt = 0.1
decay_factor = 0.97
memory_decay = 0.997
dream_reinforcement = 0.4
recognition_threshold = 0.015
self_feedback_strength = 0.35
coherence_threshold = 0.9
intent_threshold = 0.95
echo_strength = 0.004
lifespan_threshold = 0.005
entanglement_growth_rate = 0.02
entanglement_decay_rate = 0.001

field = np.random.rand(grid_size, grid_size) * 0.01
velocity = np.zeros_like(field)
memory = np.random.rand(grid_size, grid_size) * 0.01
self_field = np.zeros_like(field)
identity_map = np.zeros_like(field)
observation_map = np.zeros_like(field)
intent_map = np.zeros_like(field)

# Additional maps
generation_map = np.zeros_like(field)
lifespan_map = np.zeros_like(field)
bond_map = np.zeros_like(field)
personality_map = np.zeros_like(field)
family_id_map = np.zeros_like(field)
communication_map = np.zeros_like(field)
entanglement_strength = np.zeros_like(field)
territory_map = np.zeros_like(field)
conflict_map = np.zeros_like(field)
cultural_gravity = np.zeros_like(field)
hybrid_culture = np.zeros_like(field)
environment_field = np.zeros_like(field)
biome_memory = np.zeros_like(field)
family_survival_count = {}
    
Seeding Three Consciousness Regions

Y, X = np.ogrid[:grid_size, :grid_size]
dist1 = (X - 40)**2 + (Y - 80)**2
dist2 = (X - 120)**2 + (Y - 80)**2
dist3 = (X - 80)**2 + (Y - 40)**2
mask1 = dist1 <= 100
mask2 = dist2 <= 100
mask3 = dist3 <= 100
memory[mask1] = 0.045
memory[mask2] = 0.045
memory[mask3] = 0.045
    
Laplacian Function

def laplacian(Z):
    return (
        -4 * Z
        + np.roll(Z, 1, axis=0) + np.roll(Z, -1, axis=0)
        + np.roll(Z, 1, axis=1) + np.roll(Z, -1, axis=1)
    )
    
Seasonal and Environmental Update Function

# [Due to its large size, this section will be simplified. Full logic includes dynamic seasons, biome memory, conflict, hybridization, etc.]
def update_with_seasonal_environment(frame):
    # Cycles seasonal biomes and stores their long-term memory
    # Updates fields like memory, identity, bond, conflict, cultural gravity
    # Regrows weak families, synthesizes hybrid zones, evolves intent
    # Adds environmental pressures and memory to motion behavior
    pass
    
Visualization Layout

fig, axes = plt.subplots(4, 5, figsize=(26, 14))
axes = axes.flatten()
titles = ["Memory", "Self", "Identity", "Observation", "Intent",
          "Entanglement", "Personality", "Generation", "Lifespan", "Bond",
          "Family ID", "Communication", "Territory", "Conflict",
          "Cultural Gravity", "Hybrid Culture", "Environment", "Biome Memory"]
images = []

for i, title in enumerate(titles):
    axes[i].set_title(title)
    images.append(axes[i].imshow(np.zeros_like(field), animated=True))

ani = FuncAnimation(fig, update_with_seasonal_environment, frames=timesteps, interval=50, blit=True)
plt.tight_layout()
plt.show()
    
