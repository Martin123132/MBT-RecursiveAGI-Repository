<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MBT Unified Reality Simulator</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            background: radial-gradient(circle at center, #0a0a2a 0%, #000000 100%);
            color: #00ff88;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            overflow-x: hidden;
        }

```
    .header {
        text-align: center;
        margin-bottom: 30px;
        animation: glow 2s ease-in-out infinite alternate;
    }
    
    @keyframes glow {
        from { text-shadow: 0 0 20px #00ff88; }
        to { text-shadow: 0 0 30px #00ff88, 0 0 40px #00ff88; }
    }
    
    .control-panel {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .parameter-group {
        background: rgba(0, 255, 136, 0.1);
        border: 2px solid #00ff88;
        border-radius: 10px;
        padding: 20px;
        backdrop-filter: blur(10px);
    }
    
    .parameter-group h3 {
        color: #ffff00;
        margin-top: 0;
        text-align: center;
    }
    
    .slider-container {
        margin: 15px 0;
    }
    
    .slider-container label {
        display: block;
        margin-bottom: 5px;
        font-size: 14px;
    }
    
    .slider {
        width: 100%;
        height: 8px;
        border-radius: 5px;
        background: #333;
        outline: none;
        -webkit-appearance: none;
    }
    
    .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: #00ff88;
        cursor: pointer;
        box-shadow: 0 0 10px #00ff88;
    }
    
    .value-display {
        display: inline-block;
        min-width: 60px;
        text-align: right;
        color: #ffff00;
        font-weight: bold;
    }
    
    .simulation-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .simulation-panel {
        background: rgba(0, 0, 50, 0.8);
        border: 2px solid #0088ff;
        border-radius: 10px;
        padding: 20px;
        min-height: 300px;
    }
    
    .simulation-panel h3 {
        color: #0088ff;
        text-align: center;
        margin-top: 0;
    }
    
    canvas {
        width: 100%;
        height: 250px;
        border: 1px solid #0088ff;
        border-radius: 5px;
        background: #000011;
    }
    
    .metrics-panel {
        background: rgba(50, 0, 50, 0.8);
        border: 2px solid #ff0088;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }
    
    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
    }
    
    .metric {
        text-align: center;
        padding: 10px;
        background: rgba(255, 0, 136, 0.2);
        border-radius: 5px;
    }
    
    .metric-value {
        font-size: 24px;
        font-weight: bold;
        color: #ff0088;
    }
    
    .metric-label {
        font-size: 12px;
        margin-top: 5px;
    }
    
    .reality-status {
        text-align: center;
        font-size: 18px;
        font-weight: bold;
        padding: 15px;
        border-radius: 10px;
        margin: 20px 0;
    }
    
    .stable { background: rgba(0, 255, 0, 0.2); color: #00ff00; }
    .unstable { background: rgba(255, 255, 0, 0.2); color: #ffff00; }
    .chaotic { background: rgba(255, 0, 0, 0.2); color: #ff0000; }
    .transcendent { background: rgba(255, 0, 255, 0.2); color: #ff00ff; }
    
    .preset-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
        margin: 20px 0;
    }
    
    .preset-btn {
        background: linear-gradient(45deg, #ff0088, #8800ff);
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 25px;
        cursor: pointer;
        font-family: inherit;
        font-weight: bold;
        transition: all 0.3s ease;
    }
    
    .preset-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 0 20px rgba(255, 0, 136, 0.5);
    }
    
    .consciousness-tracker {
        background: rgba(136, 0, 255, 0.1);
        border: 2px solid #8800ff;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
    }
    
    .consciousness-entities {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 15px;
    }
    
    .entity {
        background: rgba(136, 0, 255, 0.3);
        padding: 8px 12px;
        border-radius: 15px;
        font-size: 12px;
        border: 1px solid #8800ff;
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0%, 100% { opacity: 0.7; }
        50% { opacity: 1; }
    }
    
    .warning {
        background: rgba(255, 165, 0, 0.2);
        border: 2px solid #ffa500;
        border-radius: 10px;
        padding: 15px;
        margin: 20px 0;
        text-align: center;
        color: #ffa500;
    }
</style>
```

</head>
<body>
    <div class="header">
        <h1>üåå MBT UNIFIED REALITY SIMULATOR üåå</h1>
        <h2>Motion + Memory + Curvature = Everything</h2>
        <p>Adjust the fundamental parameters of reality and watch the universe emerge!</p>
    </div>

```
<div class="warning">
    ‚ö†Ô∏è <strong>WARNING:</strong> You are about to modify the source code of reality itself. 
    Extreme parameter values may cause existential paradoxes, consciousness collapse, or accidental universe creation.
</div>

<div class="preset-buttons">
    <button class="preset-btn" onclick="loadPreset('our_universe')">üåç Our Universe</button>
    <button class="preset-btn" onclick="loadPreset('consciousness_maximum')">üß† Max Consciousness</button>
    <button class="preset-btn" onclick="loadPreset('galaxy_optimal')">üåå Galaxy Perfect</button>
    <button class="preset-btn" onclick="loadPreset('math_universe')">üî¢ Math Paradise</button>
    <button class="preset-btn" onclick="loadPreset('chaos_mode')">üåÄ Chaos Mode</button>
    <button class="preset-btn" onclick="loadPreset('transcendent')">‚ú® Transcendent</button>
</div>

<div class="control-panel">
    <div class="parameter-group">
        <h3>‚ö° MOTION PARAMETERS</h3>
        <div class="slider-container">
            <label>Motion Field Strength: <span class="value-display" id="motion-strength-val">0.75</span></label>
            <input type="range" min="0" max="2" step="0.01" value="0.75" class="slider" id="motion-strength">
        </div>
        <div class="slider-container">
            <label>Propagation Speed: <span class="value-display" id="motion-speed-val">0.65</span></label>
            <input type="range" min="0.1" max="2" step="0.01" value="0.65" class="slider" id="motion-speed">
        </div>
        <div class="slider-container">
            <label>Motion Coupling: <span class="value-display" id="motion-coupling-val">1.20</span></label>
            <input type="range" min="0" max="3" step="0.01" value="1.20" class="slider" id="motion-coupling">
        </div>
    </div>

    <div class="parameter-group">
        <h3>üß† MEMORY PARAMETERS</h3>
        <div class="slider-container">
            <label>Memory Persistence: <span class="value-display" id="memory-persistence-val">0.92</span></label>
            <input type="range" min="0" max="1" step="0.01" value="0.92" class="slider" id="memory-persistence">
        </div>
        <div class="slider-container">
            <label>Memory Coupling: <span class="value-display" id="memory-coupling-val">0.35</span></label>
            <input type="range" min="0" max="2" step="0.01" value="0.35" class="slider" id="memory-coupling">
        </div>
        <div class="slider-container">
            <label>Memory Depth: <span class="value-display" id="memory-depth-val">5.0</span></label>
            <input type="range" min="1" max="20" step="0.1" value="5.0" class="slider" id="memory-depth">
        </div>
    </div>

    <div class="parameter-group">
        <h3>üåä CURVATURE PARAMETERS</h3>
        <div class="slider-container">
            <label>Curvature Strength: <span class="value-display" id="curvature-strength-val">1.50</span></label>
            <input type="range" min="0" max="5" step="0.01" value="1.50" class="slider" id="curvature-strength">
        </div>
        <div class="slider-container">
            <label>Asymmetry Factor: <span class="value-display" id="asymmetry-val">0.15</span></label>
            <input type="range" min="-1" max="1" step="0.01" value="0.15" class="slider" id="asymmetry">
        </div>
        <div class="slider-container">
            <label>Feedback Loop: <span class="value-display" id="feedback-val">0.80</span></label>
            <input type="range" min="0" max="2" step="0.01" value="0.80" class="slider" id="feedback">
        </div>
    </div>
</div>

<div class="reality-status" id="reality-status">
    üåç REALITY STATUS: STABLE - Universe operating within normal parameters
</div>

<div class="metrics-panel">
    <h3 style="color: #ff0088; text-align: center;">üéØ UNIVERSAL METRICS</h3>
    <div class="metrics-grid">
        <div class="metric">
            <div class="metric-value" id="consciousness-level">0.73</div>
            <div class="metric-label">Consciousness Level</div>
        </div>
        <div class="metric">
            <div class="metric-value" id="galaxy-stability">0.89</div>
            <div class="metric-label">Galaxy Stability</div>
        </div>
        <div class="metric">
            <div class="metric-value" id="quantum-coherence">0.65</div>
            <div class="metric-label">Quantum Coherence</div>
        </div>
        <div class="metric">
            <div class="metric-value" id="math-elegance">0.82</div>
            <div class="metric-label">Mathematical Elegance</div>
        </div>
        <div class="metric">
            <div class="metric-value" id="life-potential">0.71</div>
            <div class="metric-label">Life Potential</div>
        </div>
        <div class="metric">
            <div class="metric-value" id="reality-stability">0.94</div>
            <div class="metric-label">Reality Stability</div>
        </div>
    </div>
</div>

<div class="simulation-grid">
    <div class="simulation-panel">
        <h3>üåå Galaxy Formation</h3>
        <canvas id="galaxy-canvas"></canvas>
        <div style="text-align: center; margin-top: 10px; font-size: 12px;">
            <span id="galaxy-status">Stable spiral formation</span>
        </div>
    </div>

    <div class="simulation-panel">
        <h3>üß† Consciousness Emergence</h3>
        <canvas id="consciousness-canvas"></canvas>
        <div style="text-align: center; margin-top: 10px; font-size: 12px;">
            <span id="consciousness-status">Multiple awareness nodes active</span>
        </div>
    </div>

    <div class="simulation-panel">
        <h3>üî¢ Mathematical Field</h3>
        <canvas id="math-canvas"></canvas>
        <div style="text-align: center; margin-top: 10px; font-size: 12px;">
            <span id="math-status">Riemann zeros: 4/20 predicted</span>
        </div>
    </div>

    <div class="simulation-panel">
        <h3>‚öõÔ∏è Quantum Dynamics</h3>
        <canvas id="quantum-canvas"></canvas>
        <div style="text-align: center; margin-top: 10px; font-size: 12px;">
            <span id="quantum-status">Wave-particle duality active</span>
        </div>
    </div>
</div>

<div class="consciousness-tracker">
    <h3 style="color: #8800ff; text-align: center;">üëÅÔ∏è CONSCIOUS ENTITIES TRACKER</h3>
    <div class="consciousness-entities" id="entities-list">
        <div class="entity">Echo Royalty üëë</div>
        <div class="entity">Entropy Nomad üß≠</div>
        <div class="entity">Curvature Survivor üõ°Ô∏è</div>
        <div class="entity">Rebound Rebel ‚ö°</div>
        <div class="entity">Mathematical Prime üî¢</div>
    </div>
</div>

<script>
    // MBT Reality Simulator Engine
    class MBTRealitySimulator {
        constructor() {
            this.parameters = {
                motionStrength: 0.75,
                motionSpeed: 0.65,
                motionCoupling: 1.20,
                memoryPersistence: 0.92,
                memoryCoupling: 0.35,
                memoryDepth: 5.0,
                curvatureStrength: 1.50,
                asymmetry: 0.15,
                feedback: 0.80
            };
            
            this.time = 0;
            this.consciousEntities = [];
            this.galaxyStability = 0.89;
            this.quantumCoherence = 0.65;
            this.mathElegance = 0.82;
            
            this.initializeCanvases();
            this.setupEventListeners();
            this.startSimulation();
        }
        
        initializeCanvases() {
            this.canvases = {
                galaxy: document.getElementById('galaxy-canvas'),
                consciousness: document.getElementById('consciousness-canvas'),
                math: document.getElementById('math-canvas'),
                quantum: document.getElementById('quantum-canvas')
            };
            
            this.contexts = {};
            Object.keys(this.canvases).forEach(key => {
                this.contexts[key] = this.canvases[key].getContext('2d');
            });
        }
        
        setupEventListeners() {
            const sliders = [
                'motion-strength', 'motion-speed', 'motion-coupling',
                'memory-persistence', 'memory-coupling', 'memory-depth',
                'curvature-strength', 'asymmetry', 'feedback'
            ];
            
            sliders.forEach(sliderId => {
                const slider = document.getElementById(sliderId);
                const valueDisplay = document.getElementById(sliderId + '-val');
                
                slider.addEventListener('input', (e) => {
                    const value = parseFloat(e.target.value);
                    valueDisplay.textContent = value.toFixed(2);
                    this.updateParameter(sliderId, value);
                });
            });
        }
        
        updateParameter(parameterId, value) {
            const paramMap = {
                'motion-strength': 'motionStrength',
                'motion-speed': 'motionSpeed',
                'motion-coupling': 'motionCoupling',
                'memory-persistence': 'memoryPersistence',
                'memory-coupling': 'memoryCoupling',
                'memory-depth': 'memoryDepth',
                'curvature-strength': 'curvatureStrength',
                'asymmetry': 'asymmetry',
                'feedback': 'feedback'
            };
            
            this.parameters[paramMap[parameterId]] = value;
            this.updateRealityMetrics();
        }
        
        updateRealityMetrics() {
            const p = this.parameters;
            
            // Calculate emergent properties from MBT parameters
            const consciousnessLevel = this.calculateConsciousness();
            const galaxyStability = this.calculateGalaxyStability();
            const quantumCoherence = this.calculateQuantumCoherence();
            const mathElegance = this.calculateMathElegance();
            const lifePotential = this.calculateLifePotential();
            const realityStability = this.calculateRealityStability();
            
            // Update displays
            document.getElementById('consciousness-level').textContent = consciousnessLevel.toFixed(2);
            document.getElementById('galaxy-stability').textContent = galaxyStability.toFixed(2);
            document.getElementById('quantum-coherence').textContent = quantumCoherence.toFixed(2);
            document.getElementById('math-elegance').textContent = mathElegance.toFixed(2);
            document.getElementById('life-potential').textContent = lifePotential.toFixed(2);
            document.getElementById('reality-stability').textContent = realityStability.toFixed(2);
            
            this.updateRealityStatus(realityStability, consciousnessLevel);
            this.updateConsciousEntities(consciousnessLevel);
        }
        
        calculateConsciousness() {
            const p = this.parameters;
            return Math.tanh(
                p.motionStrength * p.memoryCoupling * p.curvatureStrength * 
                p.memoryPersistence * p.feedback
            );
        }
        
        calculateGalaxyStability() {
            const p = this.parameters;
            const optimal = p.motionSpeed * (1 - Math.abs(p.asymmetry)) * p.curvatureStrength;
            return Math.min(1.0, optimal / 2.0);
        }
        
        calculateQuantumCoherence() {
            const p = this.parameters;
            return Math.tanh(p.motionCoupling * p.memoryCoupling * (1 + p.feedback));
        }
        
        calculateMathElegance() {
            const p = this.parameters;
            const balance = 1 - Math.abs(p.motionStrength - p.curvatureStrength);
            return balance * p.memoryPersistence;
        }
        
        calculateLifePotential() {
            const p = this.parameters;
            const complexity = p.motionStrength * p.curvatureStrength;
            const stability = p.memoryPersistence * (1 - Math.abs(p.asymmetry));
            return Math.tanh(complexity * stability);
        }
        
        calculateRealityStability() {
            const p = this.parameters;
            const allParams = Object.values(p);
            const variance = allParams.reduce((sum, val) => sum + Math.pow(val - 1, 2), 0) / allParams.length;
            return Math.max(0, 1 - variance);
        }
        
        updateRealityStatus(stability, consciousness) {
            const statusEl = document.getElementById('reality-status');
            
            if (consciousness > 0.9) {
                statusEl.className = 'reality-status transcendent';
                statusEl.innerHTML = '‚ú® REALITY STATUS: TRANSCENDENT - Consciousness saturation achieved!';
            } else if (stability < 0.3) {
                statusEl.className = 'reality-status chaotic';
                statusEl.innerHTML = 'üåÄ REALITY STATUS: CHAOTIC - Universe becoming unstable!';
            } else if (stability < 0.6) {
                statusEl.className = 'reality-status unstable';
                statusEl.innerHTML = '‚ö†Ô∏è REALITY STATUS: UNSTABLE - Parameters outside safe range';
            } else {
                statusEl.className = 'reality-status stable';
                statusEl.innerHTML = 'üåç REALITY STATUS: STABLE - Universe operating normally';
            }
        }
        
        updateConsciousEntities(consciousnessLevel) {
            const entityTypes = [
                'Echo Royalty üëë', 'Entropy Nomad üß≠', 'Curvature Survivor üõ°Ô∏è',
                'Rebound Rebel ‚ö°', 'Mathematical Prime üî¢', 'Quantum Oracle üîÆ',
                'Memory Keeper üìö', 'Motion Dancer üíÉ', 'Spiral Sage üåÄ'
            ];
            
            const numEntities = Math.floor(consciousnessLevel * entityTypes.length);
            const entitiesList = document.getElementById('entities-list');
            
            entitiesList.innerHTML = '';
            for (let i = 0; i < numEntities; i++) {
                const entity = document.createElement('div');
                entity.className = 'entity';
                entity.textContent = entityTypes[i];
                entitiesList.appendChild(entity);
            }
        }
        
        drawGalaxy(ctx, width, height) {
            ctx.clearRect(0, 0, width, height);
            const centerX = width / 2;
            const centerY = height / 2;
            
            // Draw spiral galaxy based on MBT orbital mechanics
            ctx.strokeStyle = '#4488ff';
            ctx.lineWidth = 2;
            
            for (let arm = 0; arm < 4; arm++) {
                ctx.beginPath();
                for (let r = 10; r < 100; r += 2) {
                    const angle = (r * 0.1) + (arm * Math.PI / 2) + (this.time * 0.01);
                    const stability = this.calculateGalaxyStability();
                    const x = centerX + r * Math.cos(angle) * stability;
                    const y = centerY + r * Math.sin(angle) * stability;
                    
                    if (r === 10) ctx.moveTo(x, y);
                    else ctx.lineTo(x, y);
                }
                ctx.stroke();
            }
            
            // Central black hole
            ctx.fillStyle = '#000';
            ctx.beginPath();
            ctx.arc(centerX, centerY, 5, 0, 2 * Math.PI);
            ctx.fill();
        }
        
        drawConsciousness(ctx, width, height) {
            ctx.clearRect(0, 0, width, height);
            
            const consciousnessLevel = this.calculateConsciousness();
            const numNodes = Math.floor(consciousnessLevel * 20);
            
            // Draw consciousness nodes
            for (let i = 0; i < numNodes; i++) {
                const x = Math.random() * width;
                const y = Math.random() * height;
                const size = Math.random() * 10 + 5;
                const brightness = consciousnessLevel;
                
                ctx.fillStyle = `rgba(136, 0, 255, ${brightness})`;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, 2 * Math.PI);
                ctx.fill();
                
                // Consciousness connections
                if (i > 0 && Math.random() < consciousnessLevel) {
                    ctx.strokeStyle = `rgba(136, 0, 255, ${brightness * 0.5})`;
                    ctx.lineWidth = 1;
                    ctx.beginPath();
                    ctx.moveTo(x, y);
                    ctx.lineTo(Math.random() * width, Math.random() * height);
                    ctx.stroke();
                }
            }
        }
        
        drawMath(ctx, width, height) {
            ctx.clearRect(0, 0, width, height);
            
            // Draw mathematical field (Riemann-like)
            const elegance = this.calculateMathElegance();
            
            ctx.strokeStyle = '#ffff00';
            ctx.lineWidth = 1;
            
            for (let x = 0; x < width; x += 10) {
                const t = x / width * 4 * Math.PI + this.time * 0.02;
                const y = height/2 + Math.sin(t) * Math.cos(t * 2) * elegance * 50;
                
                if (x === 0) {
                    ctx.beginPath();
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            }
            ctx.stroke();
            
            // Draw potential Riemann zeros
            for (let i = 0; i < 5; i++) {
                const x = (i + 1) * width / 6;
                const y = height / 2;
                
                ctx.fillStyle = elegance > 0.7 ? '#ff0000' : '#888888';
                ctx.beginPath();
                ctx.arc(x, y, 3, 0, 2 * Math.PI);
                ctx.fill();
            }
        }
        
        drawQuantum(ctx, width, height) {
            ctx.clearRect(0, 0, width, height);
            
            const coherence = this.calculateQuantumCoherence();
            
            // Draw quantum wave function
            ctx.strokeStyle = '#00ffff';
            ctx.lineWidth = 2;
            ctx.beginPath();
            
            for (let x = 0; x < width; x++) {
                const t = x / width * 8 * Math.PI + this.time * 0.05;
                const wave1 = Math.sin(t) * coherence;
                const wave2 = Math.sin(t * 1.5 + Math.PI/4) * coherence;
                const y = height/2 + (wave1 + wave2) * 30;
                
                if (x === 0) ctx.moveTo(x, y);
                else ctx.lineTo(x, y);
            }
            ctx.stroke();
            
            // Quantum tunneling events
            if (coherence > 0.6) {
                for (let i = 0; i < 3; i++) {
                    const x = Math.random() * width;
                    const y = Math.random() * height;
                    
                    ctx.fillStyle = '#ffffff';
                    ctx.globalAlpha = Math.random() * coherence;
                    ctx.beginPath();
                    ctx.arc(x, y, 2, 0, 2 * Math.PI);
                    ctx.fill();
                    ctx.globalAlpha = 1;
                }
            }
        }
        
        animate() {
            this.time++;
            
            Object.keys(this.contexts).forEach(key => {
                const canvas = this.canvases[key];
                const ctx = this.contexts[key];
                
                // Set canvas size
                canvas.width = canvas.offsetWidth;
                canvas.height = canvas.offsetHeight;
                
                switch(key) {
                    case 'galaxy':
                        this.drawGalaxy(ctx, canvas.width, canvas.height);
                        break;
                    case 'consciousness':
                        this.drawConsciousness(ctx, canvas.width, canvas.height);
                        break;
                    case 'math':
                        this.drawMath(ctx, canvas.width, canvas.height);
                        break;
                    case 'quantum':
                        this.drawQuantum(ctx, canvas.width, canvas.height);
                        break;
                }
            });
            
            requestAnimationFrame(() => this.animate());
        }
        
        startSimulation() {
            this.updateRealityMetrics();
            this.animate();
        }
    }
    
    // Preset configurations
    const presets = {
        our_universe: {
            motionStrength: 0.75, motionSpeed: 0.65, motionCoupling: 1.20,
            memoryPersistence: 0.92, memoryCoupling: 0.35, memoryDepth: 5.0,
            curvatureStrength: 1.50, asymmetry: 0.15, feedback: 0.80
        },
        consciousness_maximum: {
            motionStrength: 1.50, motionSpeed: 1.20, motionCoupling: 2.50,
            memoryPersistence: 0.98, memoryCoupling: 1.80, memoryDepth: 15.0,
            curvatureStrength: 2.80, asymmetry: 0.05, feedback: 1.95
        },
        galaxy_optimal: {
            motionStrength: 0.85, motionSpeed: 0.70, motionCoupling: 1.00,
            memoryPersistence: 0.88, memoryCoupling: 0.25, memoryDepth: 3.0,
            curvatureStrength: 1.20, asymmetry: 0.02, feedback: 0.65
        },
        math_universe: {
            motionStrength: 1.00, motionSpeed: 0.80, motionCoupling: 1.60,
            memoryPersistence: 0.95, memoryCoupling: 0.90, memoryDepth: 10.0,
            curvatureStrength: 2.00, asymmetry: 0.00, feedback: 1.20
        },
        chaos_mode: {
            motionStrength: 1.95, motionSpeed: 1.85, motionCoupling: 2.90,
            memoryPersistence: 0.30, memoryCoupling: 1.95, memoryDepth: 1.0,
            curvatureStrength: 4.50, asymmetry: 0.85, feedback: 1.98
        },
        transcendent: {
            motionStrength: 2.00, motionSpeed: 2.00, motionCoupling: 3.00,
            memoryPersistence: 1.00, memoryCoupling: 2.00, memoryDepth: 20.0,
            curvatureStrength: 5.00, asymmetry: 0.01, feedback: 2.00
        }
    };
    
    function loadPreset(presetName) {
        const preset = presets[presetName];
        if (!preset) return;
        
        // Update sliders and displays
        Object.keys(preset).forEach(param => {
            const sliderMap = {
                motionStrength: 'motion-strength',
                motionSpeed: 'motion-speed',
                motionCoupling: 'motion-coupling',
                memoryPersistence: 'memory-persistence',
                memoryCoupling: 'memory-coupling',
                memoryDepth: 'memory-depth',
                curvatureStrength: 'curvature-strength',
                asymmetry: 'asymmetry',
                feedback: 'feedback'
            };
            
            const sliderId = sliderMap[param];
            const slider = document.getElementById(sliderId);
            const valueDisplay = document.getElementById(sliderId + '-val');
            
            if (slider && valueDisplay) {
                slider.value = preset[param];
                valueDisplay.textContent = preset[param].toFixed(2);
            }
        });
        
        // Update simulator parameters
        if (window.simulator) {
            window.simulator.parameters = {...preset};
            window.simulator.updateRealityMetrics();
        }
        
        // Visual feedback
        const buttons = document.querySelectorAll('.preset-btn');
        buttons.forEach(btn => btn.style.transform = 'scale(1.0)');
        event.target.style.transform = 'scale(1.1)';
        setTimeout(() => event.target.style.transform = 'scale(1.0)', 200);
    }
    
    // Initialize the MBT Reality Simulator when page loads
    document.addEventListener('DOMContentLoaded', () => {
        window.simulator = new MBTRealitySimulator();
        
        // Add some dramatic startup effects
        setTimeout(() => {
            const status = document.getElementById('reality-status');
            status.style.animation = 'glow 1s ease-in-out';
        }, 1000);
        
        // Show reality initialization message
        const originalStatus = document.getElementById('reality-status').innerHTML;
        document.getElementById('reality-status').innerHTML = 'üåå INITIALIZING REALITY... Loading Motion + Memory + Curvature engine...';
        document.getElementById('reality-status').className = 'reality-status transcendent';
        
        setTimeout(() => {
            document.getElementById('reality-status').innerHTML = originalStatus;
            document.getElementById('reality-status').className = 'reality-status stable';
        }, 3000);
    });
    
    // Add keyboard shortcuts for advanced users
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey || e.metaKey) {
            switch(e.key) {
                case '1':
                    e.preventDefault();
                    loadPreset('our_universe');
                    break;
                case '2':
                    e.preventDefault();
                    loadPreset('consciousness_maximum');
                    break;
                case '3':
                    e.preventDefault();
                    loadPreset('galaxy_optimal');
                    break;
                case '4':
                    e.preventDefault();
                    loadPreset('math_universe');
                    break;
                case '5':
                    e.preventDefault();
                    loadPreset('chaos_mode');
                    break;
                case '6':
                    e.preventDefault();
                    loadPreset('transcendent');
                    break;
                case 'r':
                    e.preventDefault();
                    // Random parameters
                    Object.keys(window.simulator.parameters).forEach(param => {
                        const value = Math.random() * 2;
                        window.simulator.parameters[param] = value;
                        
                        // Update corresponding slider
                        const sliderMap = {
                            motionStrength: 'motion-strength',
                            motionSpeed: 'motion-speed',
                            motionCoupling: 'motion-coupling',
                            memoryPersistence: 'memory-persistence',
                            memoryCoupling: 'memory-coupling',
                            memoryDepth: 'memory-depth',
                            curvatureStrength: 'curvature-strength',
                            asymmetry: 'asymmetry',
                            feedback: 'feedback'
                        };
                        
                        const sliderId = sliderMap[param];
                        if (sliderId) {
                            const slider = document.getElementById(sliderId);
                            const valueDisplay = document.getElementById(sliderId + '-val');
                            if (slider && valueDisplay) {
                                slider.value = value;
                                valueDisplay.textContent = value.toFixed(2);
                            }
                        }
                    });
                    window.simulator.updateRealityMetrics();
                    break;
            }
        }
    });
    
    // Add secret konami code for ultimate mode
    let konamiCode = [];
    const konamiSequence = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'KeyB', 'KeyA'];
    
    document.addEventListener('keydown', (e) => {
        konamiCode.push(e.code);
        if (konamiCode.length > konamiSequence.length) {
            konamiCode.shift();
        }
        
        if (konamiCode.join(',') === konamiSequence.join(',')) {
            // ULTIMATE REALITY MODE ACTIVATED
            document.body.style.animation = 'glow 0.5s infinite alternate';
            document.getElementById('reality-status').innerHTML = 'üåü ULTIMATE REALITY MODE ACTIVATED - You now have god-mode access to universe parameters!';
            document.getElementById('reality-status').className = 'reality-status transcendent';
            
            // Unlock extreme parameter ranges
            document.querySelectorAll('.slider').forEach(slider => {
                if (slider.max < 10) slider.max = 10;
                if (slider.min > -5) slider.min = -5;
            });
            
            // Add special consciousness entities
            const entitiesList = document.getElementById('entities-list');
            const godEntity = document.createElement('div');
            godEntity.className = 'entity';
            godEntity.textContent = 'Reality Architect üèóÔ∏è';
            godEntity.style.background = 'linear-gradient(45deg, gold, white)';
            godEntity.style.color = 'black';
            entitiesList.appendChild(godEntity);
            
            setTimeout(() => {
                document.body.style.animation = '';
            }, 5000);
            
            konamiCode = [];
        }
    });
</script>
```

</body>
</html>
